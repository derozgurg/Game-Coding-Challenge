{"version":3,"file":"canvas-extract.min.js","sources":["../src/CanvasExtract.js"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.CanvasExtract} extract\n         * @memberof PIXI.CanvasRenderer#\n         * @see PIXI.CanvasExtract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n}\n"],"names":["const","TEMP_RECT","CanvasExtract","renderer","this","extract","image","target","format","quality","Image","src","base64","canvas","toDataURL","context","resolution","frame","renderTexture","RenderTexture","generateTexture","baseTexture","_canvasRenderTarget","rootContext","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","canvasData","getImageData","x","y","putImageData","pixels","data","destroy"],"mappings":";;;;;;;gFAIAA,IAAMC,EAAY,mBAULC,EAKT,SAAYC,GAERC,KAAKD,SAAWA,EAQhBA,EAASE,QAAUD,aAY3BF,YAAII,eAAMC,EAAQC,EAAQC,GAElBT,IAAMM,EAAQ,IAAII,MAItB,OAFIJ,EAAMK,IAAMP,KAAKQ,OAAOL,EAAQC,EAAQC,GAEjCH,GAafJ,YAAIU,gBAAOL,EAAQC,EAAQC,GAEnB,OAAOL,KAAKS,OAAON,GAAQO,UAAUN,EAAQC,IAUrDP,YAAIW,gBAAON,GAEHP,IACIe,EACAC,EACAC,EACAC,EAJEf,EAAWC,KAAKD,SAMlBI,IAIAW,EAFIX,aAAkBY,gBAEFZ,EAIAJ,EAASiB,gBAAgBb,IAI7CW,GAEJH,EAAcG,EAAcG,YAAYC,oBAAoBP,QAC5DC,EAAiBE,EAAcG,YAAYC,oBAAoBN,WAC3DC,EAAQC,EAAcD,QAItBF,EAAUZ,EAASoB,YACnBP,EAAab,EAASa,YAC1BC,EAAYhB,GACFuB,MAAQpB,KAAKD,SAASqB,MAChCP,EAAUQ,OAASrB,KAAKD,SAASsB,QAGjCzB,IAAMwB,EAAQE,KAAKC,MAAOV,EAAMO,MAAQR,EAAc,MAChDS,EAASC,KAAKC,MAAOV,EAAMQ,OAAST,EAAc,MAElDY,EAAe,IAAIC,qBAAmBL,EAAOC,EAAQ,GACrDK,EAAaf,EAAQgB,aAAad,EAAMe,EAAIhB,EAAYC,EAAMgB,EAAIjB,EAAYQ,EAAOC,GAK3F,OAHAG,EAAab,QAAQmB,aAAaJ,EAAY,EAAG,GAG1CF,EAAaf,QAW5BX,YAAIiC,gBAAO5B,GAEHP,IACIe,EACAC,EACAC,EACAC,EAJEf,EAAWC,KAAKD,SAiC1B,OA3BQI,IAIAW,EAFIX,aAAkBY,gBAEFZ,EAIAJ,EAASiB,gBAAgBb,IAI7CW,GAEJH,EAAcG,EAAcG,YAAYC,oBAAoBP,QAC5DC,EAAiBE,EAAcG,YAAYC,oBAAoBN,WAC3DC,EAAQC,EAAcD,QAItBF,EAAUZ,EAASoB,aAEvBN,EAAYhB,GACFuB,MAAQrB,EAASqB,MACvBP,EAAMQ,OAAStB,EAASsB,QAGrBV,EAAQgB,aAAa,EAAG,EAAGd,EAAMO,MAAQR,EAAYC,EAAMQ,OAAST,GAAYoB,MAO/FlC,YAAImC,mBAEIjC,KAAKD,SAASE,QAAU,KACxBD,KAAKD,SAAW"}