{"version":3,"file":"accessibility.min.js","sources":["../src/accessibleTarget.js","../src/AccessibilityManager.js"],"sourcesContent":["/**\n * Default property values of accessible objects\n * used by {@link PIXI.accessibility.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI.accessibility\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibility.accessibleTarget\n *      );\n */\nexport const accessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: false,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n};\n","import { isMobile, removeItems } from '@pixi/utils';\n\nimport { DisplayObject } from '@pixi/display';\nimport { accessibleTarget } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI.accessibility\n */\nexport class AccessibilityManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        /**\n         * @type {?HTMLElement}\n         * @private\n         */\n        this._hookDiv = null;\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX;\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        /**\n         * A flag\n         * @type {boolean}\n         * @readonly\n         */\n        this.isActive = false;\n\n        /**\n         * A flag\n         * @type {boolean}\n         * @readonly\n         */\n        this.isMobileAccessibility = false;\n\n        /**\n         * count to throttle div updates on android devices\n         * @type number\n         * @private\n         */\n        this.androidUpdateCount = 0;\n\n        /**\n         * the frequency to update the div elements ()\n         * @private\n         */\n        this.androidUpdateFrequency = 500; // 2fps\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    createTouchHook()\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessability for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this.isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    destroyTouchHook()\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    activate()\n    {\n        if (this.isActive)\n        {\n            return;\n        }\n\n        this.isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n\n        if (this.renderer.view.parentNode)\n        {\n            this.renderer.view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    deactivate()\n    {\n        if (!this.isActive || this.isMobileAccessibility)\n        {\n            return;\n        }\n\n        this.isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    updateAccessibleObjects(displayObject)\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i]);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    update()\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n\n        const rect = this.renderer.view.getBoundingClientRect();\n\n        const resolution = this.renderer.resolution;\n\n        const sx = (rect.width / this.renderer.width) * resolution;\n        const sy = (rect.height / this.renderer.height) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${this.renderer.width}px`;\n        div.style.height = `${this.renderer.height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLDivElement} div\n     */\n    updateDebugHTML(div)\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    capHitArea(hitArea)\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        if (hitArea.x + hitArea.width > this.renderer.width)\n        {\n            hitArea.width = this.renderer.width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > this.renderer.height)\n        {\n            hitArea.height = this.renderer.height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    addChild(displayObject)\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX;\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    _onClick(e)\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n        interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n        interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    _onFocus(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'assertive');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    _onFocusOut(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'polite');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    _onKeyDown(e)\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    _onMouseMove(e)\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    destroy()\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            this.children[i].div = null;\n        }\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"],"names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","mixin","const","AccessibilityManager","renderer","this","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","DIV_TOUCH_SIZE","height","position","top","DIV_TOUCH_POS_X","left","DIV_TOUCH_POS_Y","zIndex","pool","renderId","debug","children","_onKeyDown","bind","_onMouseMove","isActive","isMobileAccessibility","androidUpdateCount","androidUpdateFrequency","window","addEventListener","hookDiv","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","backgroundColor","title","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","deactivate","off","updateAccessibleObjects","displayObject","visible","interactive","addChild","i","length","now","performance","android","device","renderingToScreen","_lastObjectRendered","rect","getBoundingClientRect","resolution","sx","sy","let","child","removeItems","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","updateDebugHTML","innerHTML","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","type","e","interactionManager","plugins","interaction","dispatchEvent","target","eventData","keyCode","movementX","movementY","destroy"],"mappings":";;;;;;;qIAgBaA,EAAmB,CAQ5BC,YAAY,EASZC,gBAAiB,KAQjBC,eAAgB,KAQhBC,SAAU,EAOVC,mBAAmB,EAOnBC,gBAAgB,EAUhBC,eAAgB,SAUhBC,wBAAyB,OAUzBC,oBAAoB,sBCvFVC,MAAMV,GAEpBW,IAwBaC,EAKT,SAAYC,GAMRC,KAAKC,SAAW,MACZC,WAASC,QAAUD,WAASE,QAE5BJ,KAAKK,kBAIb,IAAUC,EAAMC,SAASC,cAAc,OAEvCF,EAAQG,MAAMC,MAAWC,QACzBL,EAAQG,MAAMG,OAAYD,QACtBL,EAAIG,MAAMI,SAAW,WACzBP,EAAQG,MAAMK,IAASC,MACvBT,EAAQG,MAAMO,KAAUC,MACpBX,EAAIG,MAAMS,OA5CO,EAoDjBlB,KAAKM,IAAMA,EAQXN,KAAKmB,KAAO,GAQZnB,KAAKoB,SAAW,EAOhBpB,KAAKqB,OAAQ,EAObrB,KAAKD,SAAWA,EAQhBC,KAAKsB,SAAW,GAQhBtB,KAAKuB,WAAavB,KAAKuB,WAAWC,KAAKxB,MAQvCA,KAAKyB,aAAezB,KAAKyB,aAAaD,KAAKxB,MAO3CA,KAAK0B,UAAW,EAOhB1B,KAAK2B,uBAAwB,EAO7B3B,KAAK4B,mBAAqB,EAM1B5B,KAAK6B,uBAAyB,IAG9BC,OAAOC,iBAAiB,UAAW/B,KAAKuB,YAAY,WAQ5DzB,YAAIO,sCAEU2B,EAAUzB,SAASC,cAAc,UAE3CwB,EAAYvB,MAAMC,MAAWuB,MAC7BD,EAAYvB,MAAMG,OAAYqB,MAC1BD,EAAQvB,MAAMI,SAAW,WAC7BmB,EAAYvB,MAAMK,IAASoB,UAC3BF,EAAYvB,MAAMO,KAAUmB,UACxBH,EAAQvB,MAAMS,OApJE,EAqJhBc,EAAQvB,MAAM2B,gBAAkB,UAChCJ,EAAQK,MAAQ,kDAEhBL,EAAQD,iBAAiB,mBAErB/B,EAAK2B,uBAAwB,EAC7B3B,EAAKsC,WACLtC,EAAKuC,qBAGbhC,SAAaiC,KAAKC,YAAYT,GAC1BhC,KAAKC,SAAW+B,GAQxBlC,YAAIyC,4BAESvC,KAAKC,WAIdM,SAAaiC,KAAKE,YAAY1C,KAAKC,UAC/BD,KAAKC,SAAW,OASxBH,YAAIwC,oBAEQtC,KAAK0B,WAKT1B,KAAK0B,UAAW,EAEhBI,OAAOvB,SAASwB,iBAAiB,YAAa/B,KAAKyB,cAAc,GACjEK,OAAOa,oBAAoB,UAAW3C,KAAKuB,YAAY,GAEvDvB,KAAKD,SAAS6C,GAAG,aAAc5C,KAAK6C,OAAQ7C,MAExCA,KAAKD,SAAS+C,KAAKC,YAEnB/C,KAAKD,SAAS+C,KAAKC,WAAWN,YAAYzC,KAAKM,OAU3DR,YAAIkD,sBAEShD,KAAK0B,WAAY1B,KAAK2B,wBAK3B3B,KAAK0B,UAAW,EAEhBI,OAAOvB,SAASoC,oBAAoB,YAAa3C,KAAKyB,cAAc,GACpEK,OAAOC,iBAAiB,UAAW/B,KAAKuB,YAAY,GAEpDvB,KAAKD,SAASkD,IAAI,aAAcjD,KAAK6C,QAEjC7C,KAAKM,IAAIyC,YAET/C,KAAKM,IAAIyC,WAAWL,YAAY1C,KAAKM,OAUjDR,YAAIoD,iCAAwBC,GAExB,GAASA,EAAcC,SAAYD,EAAcxD,mBAAjD,CAKQwD,EAAchE,YAAcgE,EAAcE,cAErCF,EAAc5D,mBAEfS,KAAKsD,SAASH,GAGlBA,EAAc/B,SAAWpB,KAAKoB,UAKlC,IAFAvB,IAAMyB,EAAW6B,EAAc7B,SAEtBiC,EAAI,EAAGA,EAAIjC,EAASkC,OAAQD,IAErCvD,KAASkD,wBAAwB5B,EAASiC,MASlDzD,YAAI+C,kBAMA,IAAUY,EAAMC,YAAYD,MAE5B,KAAQvD,WAASyD,QAAQC,QAAUH,EAAMzD,KAAK4B,sBAK9C5B,KAAS4B,mBAAqB6B,EAAMzD,KAAK6B,uBAEhC7B,KAAKD,SAAS8D,mBAAnB,CAMJ7D,KAASkD,wBAAwBlD,KAAKD,SAAS+D,qBAE3CjE,IAAMkE,EAAO/D,KAAKD,SAAS+C,KAAKkB,wBAE1BC,EAAajE,KAAKD,SAASkE,WAE3BC,EAAMH,EAAKrD,MAAQV,KAAKD,SAASW,MAASuD,EAC1CE,EAAMJ,EAAKnD,OAASZ,KAAKD,SAASa,OAAUqD,EAE9C3D,EAAMN,KAAKM,IAEnBA,EAAQG,MAAMO,KAAU+C,YACxBzD,EAAQG,MAAMK,IAASiD,WACnBzD,EAAIG,MAAMC,MAAWV,KAAKD,oBAC1BO,EAAIG,MAAMG,OAAYZ,KAAKD,qBAE3B,IAAKqE,IAAIb,EAAI,EAAGA,EAAIvD,KAAKsB,SAASkC,OAAQD,IAC9C,CACI,IAAUc,EAAQrE,KAAKsB,SAASiC,GAE5B,GAAIc,EAAMjD,WAAapB,KAAKoB,SAExBiD,EAAM9E,mBAAoB,EAE9B+E,cAAgBtE,KAAKsB,SAAUiC,EAAG,GAClCvD,KAASM,IAAIoC,YAAY2B,EAAM7E,gBAC/BQ,KAASmB,KAAKoD,KAAKF,EAAM7E,gBACrB6E,EAAM7E,eAAiB,KAE3B+D,QAGJ,CAEQjD,EAAM+D,EAAM7E,eACZ4E,IAAII,EAAUH,EAAMG,QACdC,EAAKJ,EAAMK,eAEbL,EAAMG,SAEVlE,EAAQG,MAAMO,MAAWyD,EAAGE,GAAMH,EAAQI,EAAIH,EAAGI,GAAMX,OACvD5D,EAAQG,MAAMK,KAAU2D,EAAGK,GAAMN,EAAQO,EAAIN,EAAGO,GAAMb,OAElD7D,EAAIG,MAAMC,MAAW8D,EAAQ9D,MAAQ+D,EAAGI,EAAIX,OAC5C5D,EAAIG,MAAMG,OAAY4D,EAAQ5D,OAAS6D,EAAGO,EAAIb,SAI9CK,EAAUH,EAAMY,YAEhBjF,KAAKkF,WAAWV,GAEhBlE,EAAIG,MAAMO,KAAUwD,EAAQI,EAAIV,OAChC5D,EAAIG,MAAMK,IAAS0D,EAAQO,EAAIZ,OAE/B7D,EAAIG,MAAMC,MAAW8D,EAAQ9D,MAAQwD,OACrC5D,EAAIG,MAAMG,OAAY4D,EAAQ5D,OAASuD,OAGnC7D,EAAI+B,QAAUgC,EAAMjF,iBAA6C,OAA1BiF,EAAMjF,kBAE7CkB,EAAI+B,MAAQgC,EAAMjF,iBAElBkB,EAAI6E,aAAa,gBAAkBd,EAAMhF,gBACb,OAAzBgF,EAAMhF,gBAEbiB,EAAQ8E,aAAa,aAAcf,EAAMhF,iBAKzCgF,EAAMjF,kBAAoBkB,EAAI+B,OAASgC,EAAM/E,WAAagB,EAAIhB,WAE9DgB,EAAI+B,MAAQgC,EAAMjF,gBAClBkB,EAAIhB,SAAW+E,EAAM/E,SACjBU,KAAKqB,OAAOrB,KAAKqF,gBAAgB/E,KAMjDN,KAAKoB,aASbtB,YAAIuF,yBAAgB/E,GAEZA,EAAIgF,UAAY,SAAShF,wBAAyBA,2BAA4BA,EAAY,UAQlGR,YAAIoF,oBAAWV,GAEHA,EAAQI,EAAI,IAEZJ,EAAQ9D,OAAS8D,EAAQI,EACzBJ,EAAQI,EAAI,GAGZJ,EAAQO,EAAI,IAEZP,EAAQ5D,QAAU4D,EAAQO,EAC1BP,EAAQO,EAAI,GAGZP,EAAQI,EAAIJ,EAAQ9D,MAAQV,KAAKD,SAASW,QAE1C8D,EAAQ9D,MAAQV,KAAKD,SAASW,MAAQ8D,EAAQI,GAG9CJ,EAAQO,EAAIP,EAAQ5D,OAASZ,KAAKD,SAASa,SAE3C4D,EAAQ5D,OAASZ,KAAKD,SAASa,OAAS4D,EAAQO,IAU5DjF,YAAIwD,kBAASH,GAIT,IAAQ7C,EAAMN,KAAKmB,KAAKoE,MAEfjF,KAELA,EAAUC,SAASC,cAAc,WAEzBC,MAAMC,MAAWC,QACzBL,EAAQG,MAAMG,OAAYD,QACtBL,EAAIG,MAAM2B,gBAAkBpC,KAAKqB,MAAQ,wBAA0B,cACnEf,EAAIG,MAAMI,SAAW,WACrBP,EAAIG,MAAMS,OArbG,EAsbbZ,EAAIG,MAAM+E,YAAc,OAGpBC,UAAUC,UAAUC,cAAcC,QAAQ,WAAa,EAG3DtF,EAAQ8E,aAAa,YAAa,OAIlC9E,EAAQ8E,aAAa,YAAa,UAG9BK,UAAUC,UAAUG,MAAM,gBAG9BvF,EAAQ8E,aAAa,gBAAiB,aAKtC9E,EAAQ8E,aAAa,gBAAiB,QAGtC9E,EAAIyB,iBAAiB,QAAS/B,KAAK8F,SAAStE,KAAKxB,OACjDM,EAAIyB,iBAAiB,QAAS/B,KAAK+F,SAASvE,KAAKxB,OACjDM,EAAIyB,iBAAiB,WAAY/B,KAAKgG,YAAYxE,KAAKxB,QAI/DM,EAAQG,MAAMwF,cAAgB9C,EAAczD,wBAExCY,EAAI4F,KAAO/C,EAAc1D,eAErB0D,EAAc/D,iBAAqD,OAAlC+D,EAAc/D,gBAE/CkB,EAAI+B,MAAQc,EAAc/D,gBAEpB+D,EAAc9D,gBACqB,OAAjC8D,EAAc9D,iBAE1BiB,EAAQ+B,MAAQ,iBAAiBc,EAAsB,UAGnDA,EAAc9D,gBACsB,OAAjC8D,EAAc9D,gBAErBiB,EAAQ8E,aAAa,aAAcjC,EAAc9D,gBAG7CW,KAAKqB,OAAOrB,KAAKqF,gBAAgB/E,GAErC6C,EAAc5D,mBAAoB,EAClC4D,EAAc3D,eAAiBc,EAC/BA,EAAI6C,cAAgBA,EAExBnD,KAASsB,SAASiD,KAAKpB,GACvBnD,KAASM,IAAImC,YAAYU,EAAc3D,gBACvC2D,EAAkB3D,eAAeF,SAAW6D,EAAc7D,UAS9DQ,YAAIgG,kBAASK,GAET,IAAUC,EAAqBpG,KAAKD,SAASsG,QAAQC,YAEjDF,EAAmBG,cAAcJ,EAAEK,OAAOrD,cAAe,QAASiD,EAAmBK,WACrFL,EAAmBG,cAAcJ,EAAEK,OAAOrD,cAAe,aAAciD,EAAmBK,WAC1FL,EAAmBG,cAAcJ,EAAEK,OAAOrD,cAAe,MAAOiD,EAAmBK,YAS3F3G,YAAIiG,kBAASI,GAEAA,EAAEK,OAAOrB,aAAa,YAAa,QAExCgB,EAAMK,OAAOpB,aAAa,YAAa,aAE3C,IAAUgB,EAAqBpG,KAAKD,SAASsG,QAAQC,YAEjDF,EAAmBG,cAAcJ,EAAEK,OAAOrD,cAAe,YAAaiD,EAAmBK,YASjG3G,YAAIkG,qBAAYG,GAEHA,EAAEK,OAAOrB,aAAa,YAAa,QAExCgB,EAAMK,OAAOpB,aAAa,YAAa,UAE3C,IAAUgB,EAAqBpG,KAAKD,SAASsG,QAAQC,YAEjDF,EAAmBG,cAAcJ,EAAEK,OAAOrD,cAAe,WAAYiD,EAAmBK,YAShG3G,YAAIyB,oBAAW4E,GA/iBM,IAijBTA,EAAEO,SAKN1G,KAAKsC,YASbxC,YAAI2B,sBAAa0E,GAEW,IAAhBA,EAAEQ,WAAmC,IAAhBR,EAAES,WAK3B5G,KAAKgD,cAOblD,YAAI+G,mBAEI7G,KAAKuC,mBACLvC,KAAKM,IAAM,KAEX,IAAK8D,IAAIb,EAAI,EAAGA,EAAIvD,KAAKsB,SAASkC,OAAQD,IAE1CvD,KAASsB,SAASiC,GAAGjD,IAAM,KAG3BwB,OAAOvB,SAASoC,oBAAoB,YAAa3C,KAAKyB,cAAc,GACxEK,OAAWa,oBAAoB,UAAW3C,KAAKuB,YAE3CvB,KAAKmB,KAAO,KACZnB,KAAKsB,SAAW,KAChBtB,KAAKD,SAAW"}