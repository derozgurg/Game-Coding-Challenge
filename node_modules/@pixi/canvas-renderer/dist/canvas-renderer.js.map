{"version":3,"file":"canvas-renderer.js","sources":["../src/utils/CanvasMaskManager.js","../src/utils/canUseNewCanvasBlendModes.js","../src/utils/mapCanvasBlendModesToPixi.js","../src/CanvasRenderer.js","../src/canvasUtils.js","../src/Renderer.js","../src/BaseTexture.js"],"sourcesContent":["import { SHAPES } from '@pixi/math';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n\n        this._foundShapes = [];\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData)\n    {\n        const renderer = this.renderer;\n        const maskObject = maskData.isMaskData ? maskData.maskObject : maskData;\n\n        renderer.context.save();\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n\n        const foundShapes = this._foundShapes;\n\n        this.recursiveFindShapes(maskObject, foundShapes);\n        if (foundShapes.length > 0)\n        {\n            const { context } = renderer;\n\n            context.beginPath();\n\n            for (let i = 0; i < foundShapes.length; i++)\n            {\n                const shape = foundShapes[i];\n                const transform = shape.transform.worldTransform;\n\n                this.renderer.setContextTransform(transform);\n\n                this.renderGraphicsShape(shape);\n            }\n\n            foundShapes.length = 0;\n            context.clip();\n        }\n    }\n\n    /**\n     * Renders all PIXI.Graphics shapes in a subtree.\n     *\n     * @param {PIXI.Container} container - container to scan.\n     * @param {PIXI.Graphics[]} out - where to put found shapes\n     */\n    recursiveFindShapes(container, out)\n    {\n        if (container.geometry && container.geometry.graphicsData)\n        {\n            out.push(container);\n        }\n\n        const { children } = container;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.recursiveFindShapes(children[i], out);\n            }\n        }\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics)\n    {\n        graphics.finishPoly();\n\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (data.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer)\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    destroy()\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color)\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes()\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array = [])\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { AbstractRenderer, resources } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(options, arg2, arg3)\n    {\n        super('Canvas', options, arg2, arg3);\n\n        this.type = RENDERER_TYPE.CANVAS;\n\n        /**\n         * The root canvas 2d context that everything is drawn with.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.rootContext = this.view.getContext('2d', { alpha: this.transparent });\n\n        /**\n         * The currently active canvas 2d context (could change with renderTextures)\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.rootContext;\n\n        /**\n         * Boolean flag controlling canvas refresh.\n         *\n         * @member {boolean}\n         */\n        this.refresh = true;\n\n        /**\n         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n         *\n         * @member {PIXI.CanvasMaskManager}\n         */\n        this.maskManager = new CanvasMaskManager(this);\n\n        /**\n         * The canvas property used to set the canvas smoothing property.\n         *\n         * @member {string}\n         */\n        this.smoothProperty = 'imageSmoothingEnabled';\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            if (this.rootContext.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (this.rootContext.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (this.rootContext.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (this.rootContext.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<number, string>}\n         */\n        this.blendModes = mapCanvasBlendModesToPixi();\n        this._activeBlendMode = null;\n        this._outerBlend = false;\n\n        /**\n         * Projection transform, passed in render() stored here\n         * @type {null}\n         * @private\n         */\n        this._projTransform = null;\n\n        this.renderingToScreen = false;\n\n        sayHello('Canvas');\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.CanvasRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.CanvasRenderer#prerender\n         */\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to this canvas view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n     *  If unset, it will render to the root context.\n     * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n     * @param {PIXI.Matrix} [transform] - A transformation to be applied\n     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.baseTexture || renderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        this._projTransform = transform || null;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n\n            displayObject.parent = this._tempDisplayObjectParent;\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                if (this.transparent)\n                {\n                    context.clearRect(0, 0, this.width, this.height);\n                }\n                else\n                {\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                }\n            } // else {\n            // TODO: implement background for CanvasRenderTarget or RenderTexture?\n            // }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n        this._projTransform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * sets matrix of context\n     * called only from render() methods\n     * takes care about resolution\n     * @param {PIXI.Matrix} transform world matrix of current element\n     * @param {boolean} [roundPixels] whether to round (tx,ty) coords\n     * @param {number} [localResolution] If specified, used instead of `renderer.resolution` for local scaling\n     */\n    setContextTransform(transform, roundPixels, localResolution)\n    {\n        let mat = transform;\n        const proj = this._projTransform;\n        const resolution = this.resolution;\n\n        localResolution = localResolution || resolution;\n\n        if (proj)\n        {\n            mat = tempMatrix;\n            mat.copyFrom(transform);\n            mat.prepend(proj);\n        }\n\n        if (roundPixels)\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                (mat.tx * resolution) | 0,\n                (mat.ty * resolution) | 0\n            );\n        }\n        else\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                mat.tx * resolution,\n                mat.ty * resolution\n            );\n        }\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     */\n    clear(clearColor)\n    {\n        const context = this.context;\n\n        clearColor = clearColor || this._backgroundColorString;\n\n        if (!this.transparent && clearColor)\n        {\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n        }\n        else\n        {\n            context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode, readyForOuterBlend)\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        super.resize(screenWidth, screenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     */\n    invalidateBlendMode()\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.CanvasRenderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName, ctor)\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite, color) =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor];\n        }\n        else\n        {\n            canvas = document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = canvas.toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedPattern: (texture, color) =>\n    {\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.patternCache = texture.patternCache || {};\n\n        let pattern = texture.patternCache[stringColor];\n\n        if (pattern && pattern.tintId === texture._updateID)\n        {\n            return pattern;\n        }\n        if (!canvasUtils.canvas)\n        {\n            canvasUtils.canvas = document.createElement('canvas');\n        }\n        canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n        pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n        pattern.tintId = texture._updateID;\n        texture.patternCache[stringColor] = pattern;\n\n        return pattern;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay(texture, color, canvas)\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color) =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: () =>\n    { // jslint-disable no-empty-function\n\n    },\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options)\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource()\n{\n    const resource = this.resource;\n\n    return resource ? (resource.bitmap || resource.source) : null;\n};\n"],"names":["const","let","SHAPES","BLEND_MODES","Matrix","super","RENDERER_TYPE","sayHello","CanvasRenderTarget","resources","settings","SCALE_MODES","AbstractRenderer","hex2rgb","rgb2hex","Renderer","BaseTexture"],"mappings":"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"}