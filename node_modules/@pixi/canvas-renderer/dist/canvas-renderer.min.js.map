{"version":3,"file":"canvas-renderer.min.js","sources":["../src/utils/CanvasMaskManager.js","../src/utils/canUseNewCanvasBlendModes.js","../src/CanvasRenderer.js","../src/utils/mapCanvasBlendModesToPixi.js","../src/canvasUtils.js","../src/Renderer.js","../src/BaseTexture.js"],"sourcesContent":["import { SHAPES } from '@pixi/math';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n\n        this._foundShapes = [];\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData)\n    {\n        const renderer = this.renderer;\n        const maskObject = maskData.isMaskData ? maskData.maskObject : maskData;\n\n        renderer.context.save();\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n\n        const foundShapes = this._foundShapes;\n\n        this.recursiveFindShapes(maskObject, foundShapes);\n        if (foundShapes.length > 0)\n        {\n            const { context } = renderer;\n\n            context.beginPath();\n\n            for (let i = 0; i < foundShapes.length; i++)\n            {\n                const shape = foundShapes[i];\n                const transform = shape.transform.worldTransform;\n\n                this.renderer.setContextTransform(transform);\n\n                this.renderGraphicsShape(shape);\n            }\n\n            foundShapes.length = 0;\n            context.clip();\n        }\n    }\n\n    /**\n     * Renders all PIXI.Graphics shapes in a subtree.\n     *\n     * @param {PIXI.Container} container - container to scan.\n     * @param {PIXI.Graphics[]} out - where to put found shapes\n     */\n    recursiveFindShapes(container, out)\n    {\n        if (container.geometry && container.geometry.graphicsData)\n        {\n            out.push(container);\n        }\n\n        const { children } = container;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.recursiveFindShapes(children[i], out);\n            }\n        }\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics)\n    {\n        graphics.finishPoly();\n\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (data.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer)\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    destroy()\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color)\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes()\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { AbstractRenderer, resources } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(options, arg2, arg3)\n    {\n        super('Canvas', options, arg2, arg3);\n\n        this.type = RENDERER_TYPE.CANVAS;\n\n        /**\n         * The root canvas 2d context that everything is drawn with.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.rootContext = this.view.getContext('2d', { alpha: this.transparent });\n\n        /**\n         * The currently active canvas 2d context (could change with renderTextures)\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.rootContext;\n\n        /**\n         * Boolean flag controlling canvas refresh.\n         *\n         * @member {boolean}\n         */\n        this.refresh = true;\n\n        /**\n         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n         *\n         * @member {PIXI.CanvasMaskManager}\n         */\n        this.maskManager = new CanvasMaskManager(this);\n\n        /**\n         * The canvas property used to set the canvas smoothing property.\n         *\n         * @member {string}\n         */\n        this.smoothProperty = 'imageSmoothingEnabled';\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            if (this.rootContext.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (this.rootContext.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (this.rootContext.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (this.rootContext.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<number, string>}\n         */\n        this.blendModes = mapCanvasBlendModesToPixi();\n        this._activeBlendMode = null;\n        this._outerBlend = false;\n\n        /**\n         * Projection transform, passed in render() stored here\n         * @type {null}\n         * @private\n         */\n        this._projTransform = null;\n\n        this.renderingToScreen = false;\n\n        sayHello('Canvas');\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.CanvasRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.CanvasRenderer#prerender\n         */\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to this canvas view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n     *  If unset, it will render to the root context.\n     * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n     * @param {PIXI.Matrix} [transform] - A transformation to be applied\n     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.baseTexture || renderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        this._projTransform = transform || null;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n\n            displayObject.parent = this._tempDisplayObjectParent;\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                if (this.transparent)\n                {\n                    context.clearRect(0, 0, this.width, this.height);\n                }\n                else\n                {\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                }\n            } // else {\n            // TODO: implement background for CanvasRenderTarget or RenderTexture?\n            // }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n        this._projTransform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * sets matrix of context\n     * called only from render() methods\n     * takes care about resolution\n     * @param {PIXI.Matrix} transform world matrix of current element\n     * @param {boolean} [roundPixels] whether to round (tx,ty) coords\n     * @param {number} [localResolution] If specified, used instead of `renderer.resolution` for local scaling\n     */\n    setContextTransform(transform, roundPixels, localResolution)\n    {\n        let mat = transform;\n        const proj = this._projTransform;\n        const resolution = this.resolution;\n\n        localResolution = localResolution || resolution;\n\n        if (proj)\n        {\n            mat = tempMatrix;\n            mat.copyFrom(transform);\n            mat.prepend(proj);\n        }\n\n        if (roundPixels)\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                (mat.tx * resolution) | 0,\n                (mat.ty * resolution) | 0\n            );\n        }\n        else\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                mat.tx * resolution,\n                mat.ty * resolution\n            );\n        }\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     */\n    clear(clearColor)\n    {\n        const context = this.context;\n\n        clearColor = clearColor || this._backgroundColorString;\n\n        if (!this.transparent && clearColor)\n        {\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n        }\n        else\n        {\n            context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode, readyForOuterBlend)\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        super.resize(screenWidth, screenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     */\n    invalidateBlendMode()\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.CanvasRenderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName, ctor)\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array = [])\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite, color) =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor];\n        }\n        else\n        {\n            canvas = document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = canvas.toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedPattern: (texture, color) =>\n    {\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.patternCache = texture.patternCache || {};\n\n        let pattern = texture.patternCache[stringColor];\n\n        if (pattern && pattern.tintId === texture._updateID)\n        {\n            return pattern;\n        }\n        if (!canvasUtils.canvas)\n        {\n            canvasUtils.canvas = document.createElement('canvas');\n        }\n        canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n        pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n        pattern.tintId = texture._updateID;\n        texture.patternCache[stringColor] = pattern;\n\n        return pattern;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay(texture, color, canvas)\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color) =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: () =>\n    { // jslint-disable no-empty-function\n\n    },\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options)\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource()\n{\n    const resource = this.resource;\n\n    return resource ? (resource.bitmap || resource.source) : null;\n};\n"],"names":["CanvasMaskManager","renderer","this","_foundShapes","createColoredCanvas","color","const","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","canUseNewCanvasBlendModes","magenta","yellow","globalCompositeOperation","drawImage","imageData","getImageData","data","pushMask","maskData","maskObject","isMaskData","save","foundShapes","recursiveFindShapes","length","beginPath","let","i","shape","transform","worldTransform","setContextTransform","renderGraphicsShape","clip","container","out","geometry","graphicsData","push","children","graphics","finishPoly","len","type","SHAPES","POLY","points","moveTo","j","lineTo","closePath","RECT","rect","x","y","CIRC","arc","radius","Math","PI","ELIP","w","h","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","popMask","restore","invalidateBlendMode","destroy","tempMatrix","Matrix","CanvasRenderer","options","arg2","arg3","array","super","RENDERER_TYPE","CANVAS","rootContext","view","alpha","transparent","refresh","maskManager","smoothProperty","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","msImageSmoothingEnabled","initPlugins","__plugins","blendModes","BLEND_MODES","NORMAL","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","NORMAL_NPM","ADD_NPM","SCREEN_NPM","SRC_IN","SRC_OUT","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","XOR","SUBTRACT","_activeBlendMode","_outerBlend","_projTransform","renderingToScreen","sayHello","resize","render","displayObject","renderTexture","clear","skipUpdateTransform","emit","rootResolution","resolution","baseTexture","_canvasRenderTarget","CanvasRenderTarget","resource","resources","CanvasResource","valid","_lastObjectRendered","cacheParent","parent","_tempDisplayObjectParent","updateTransform","setTransform","globalAlpha","undefined","clearBeforeRender","clearRect","_backgroundColorString","tempContext","renderCanvas","roundPixels","localResolution","mat","proj","copyFrom","prepend","a","b","c","d","tx","ty","clearColor","setBlendMode","blendMode","readyForOuterBlend","outerBlend","removeView","screenWidth","screenHeight","settings","SCALE_MODE","SCALE_MODES","LINEAR","indexOf","registerPlugin","pluginName","ctor","AbstractRenderer","canvasUtils","getTintedCanvas","sprite","texture","stringColor","roundColor","toString","substr","tintCache","cachedCanvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","Image","src","toDataURL","getTintedPattern","patternCache","pattern","createPattern","tintWithMultiply","crop","_frame","clone","ceil","source","getDrawableSource","tintWithOverlay","tintWithPerPixel","rgbValues","hex2rgb","r","g","pixelData","pixels","putImageData","step","cacheStepsPerColorChannel","rgb2hex","canUseMultiply","parentCreate","Renderer","create","forceCanvas","err","prototype","bitmap"],"mappings":"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"}