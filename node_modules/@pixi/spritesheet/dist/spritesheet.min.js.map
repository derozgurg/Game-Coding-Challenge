{"version":3,"file":"spritesheet.min.js","sources":["../src/Spritesheet.js","../src/SpritesheetLoader.js"],"sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl } from '@pixi/utils';\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @class\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /**\n     * The maximum number of Textures to build per process.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    static get BATCH_SIZE()\n    {\n        return 1000;\n    }\n\n    /**\n     * @param {PIXI.BaseTexture|PIXI.Texture} baseTexture Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param {string} [resolutionFilename] - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture, data, resolutionFilename = null)\n    {\n        /**\n         * Reference to original source image from the Loader. This reference is retained so we\n         * can destroy the Texture later on. It is never used internally.\n         * @type {PIXI.Texture}\n         * @private\n         */\n        this._texture = texture instanceof Texture ? texture : null;\n\n        /**\n         * Reference to ths source texture.\n         * @type {PIXI.BaseTexture}\n         */\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n\n        /**\n         * A map containing all textures of the sprite sheet.\n         * Can be used to create a {@link PIXI.Sprite|Sprite}:\n         * ```js\n         * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n         * ```\n         * @member {Object}\n         */\n        this.textures = {};\n\n        /**\n         * A map containing the textures for each animation.\n         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n         * ```js\n         * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n         * ```\n         * @member {Object}\n         */\n        this.animations = {};\n\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        this.data = data;\n\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        this.resolution = this._updateResolution(\n            resolutionFilename\n            || (this.baseTexture.resource ? this.baseTexture.resource.url : null)\n        );\n\n        /**\n         * Map of spritesheet frames.\n         * @type {Object}\n         * @private\n         */\n        this._frames = this.data.frames;\n\n        /**\n         * Collection of frame names.\n         * @type {string[]}\n         * @private\n         */\n        this._frameKeys = Object.keys(this._frames);\n\n        /**\n         * Current batch index being processed.\n         * @type {number}\n         * @private\n         */\n        this._batchIndex = 0;\n\n        /**\n         * Callback when parse is completed.\n         * @type {Function}\n         * @private\n         */\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @private\n     * @param {string} resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return {number} Resolution to use for spritesheet.\n     */\n    _updateResolution(resolutionFilename)\n    {\n        const scale = this.data.meta.scale;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    parse(callback)\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @private\n     * @param {number} initialFrameIndex - The index of frame to start.\n     */\n    _processFrames(initialFrameIndex)\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /**\n     * Parse animations config\n     *\n     * @private\n     */\n    _processAnimations()\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /**\n     * The parse has completed.\n     *\n     * @private\n     */\n    _parseComplete()\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /**\n     * Begin the next batch of textures.\n     *\n     * @private\n     */\n    _nextBatch()\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase = false)\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            if (this._texture)\n            {\n                this._texture.destroy();\n            }\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n    }\n}\n","import { url } from '@pixi/utils';\nimport { LoaderResource } from '@pixi/loaders';\nimport { Spritesheet } from './Spritesheet';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class SpritesheetLoader\n{\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource, next)\n    {\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     * @param {PIXI.LoaderResource} resource - Resource to check path\n     * @param {string} baseUrl - Base root url\n     */\n    static getResourcePath(resource, baseUrl)\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"],"names":["Spritesheet","texture","data","resolutionFilename","this","_texture","Texture","baseTexture","BaseTexture","textures","animations","resolution","_updateResolution","resource","url","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","staticAccessors","BATCH_SIZE","scale","meta","getResolutionOfUrl","undefined","parseFloat","setResolution","parse","callback","length","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","let","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","addToCache","const","animName","frameName","push","call","setTimeout","destroy","destroyBase","SpritesheetLoader","use","next","imageResourceName","type","LoaderResource","TYPE","JSON","resources","loadOptions","crossOrigin","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","res","error","spritesheet","isDataUrl","image","resolve","replace"],"mappings":"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"}