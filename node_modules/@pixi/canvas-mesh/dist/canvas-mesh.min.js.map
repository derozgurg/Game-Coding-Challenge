{"version":3,"file":"canvas-mesh.min.js","sources":["../src/CanvasMeshRenderer.js","../src/settings.js","../src/MeshMaterial.js","../src/NineSlicePlane.js","../src/Mesh.js","../src/SimpleMesh.js","../src/SimpleRope.js"],"sourcesContent":["import { DRAW_MODES } from '@pixi/constants';\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasMeshRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the Mesh\n     *\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    render(mesh)\n    {\n        const renderer = this.renderer;\n        const transform = mesh.worldTransform;\n\n        renderer.context.globalAlpha = mesh.worldAlpha;\n        renderer.setBlendMode(mesh.blendMode);\n        renderer.setContextTransform(transform, mesh.roundPixels);\n\n        if (mesh.drawMode !== DRAW_MODES.TRIANGLES)\n        {\n            this._renderTriangleMesh(mesh);\n        }\n        else\n        {\n            this._renderTriangles(mesh);\n        }\n    }\n\n    /**\n     * Draws the object in Triangle Mesh mode\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    _renderTriangleMesh(mesh)\n    {\n        // draw triangles!!\n        const length = mesh.geometry.buffers[0].data.length;\n\n        for (let i = 0; i < length - 2; i++)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            this._renderDrawTriangle(mesh, index, (index + 2), (index + 4));\n        }\n    }\n\n    /**\n     * Draws the object in triangle mode using canvas\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     */\n    _renderTriangles(mesh)\n    {\n        // draw triangles!!\n        const indices = mesh.geometry.getIndex().data;\n        const length = indices.length;\n\n        for (let i = 0; i < length; i += 3)\n        {\n            // draw some triangles!\n            const index0 = indices[i] * 2;\n            const index1 = indices[i + 1] * 2;\n            const index2 = indices[i + 2] * 2;\n\n            this._renderDrawTriangle(mesh, index0, index1, index2);\n        }\n    }\n\n    /**\n     * Draws one of the triangles that from the Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     * @param {number} index0 - the index of the first vertex\n     * @param {number} index1 - the index of the second vertex\n     * @param {number} index2 - the index of the third vertex\n     */\n    _renderDrawTriangle(mesh, index0, index1, index2)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.buffers[0].data;\n        const { uvs, texture } = mesh;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        const base = texture.baseTexture;\n        const textureSource = base.getDrawableSource();\n        const textureWidth = base.width;\n        const textureHeight = base.height;\n\n        const u0 = uvs[index0] * base.width;\n        const u1 = uvs[index1] * base.width;\n        const u2 = uvs[index2] * base.width;\n        const v0 = uvs[index0 + 1] * base.height;\n        const v1 = uvs[index1 + 1] * base.height;\n        const v2 = uvs[index2 + 1] * base.height;\n\n        let x0 = vertices[index0];\n        let x1 = vertices[index1];\n        let x2 = vertices[index2];\n        let y0 = vertices[index0 + 1];\n        let y1 = vertices[index1 + 1];\n        let y2 = vertices[index2 + 1];\n\n        const canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n\n        if (canvasPadding > 0)\n        {\n            const paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n            const paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n            const centerX = (x0 + x1 + x2) / 3;\n            const centerY = (y0 + y1 + y2) / 3;\n\n            let normX = x0 - centerX;\n            let normY = y0 - centerY;\n\n            let dist = Math.sqrt((normX * normX) + (normY * normY));\n\n            x0 = centerX + ((normX / dist) * (dist + paddingX));\n            y0 = centerY + ((normY / dist) * (dist + paddingY));\n\n            //\n\n            normX = x1 - centerX;\n            normY = y1 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x1 = centerX + ((normX / dist) * (dist + paddingX));\n            y1 = centerY + ((normY / dist) * (dist + paddingY));\n\n            normX = x2 - centerX;\n            normY = y2 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x2 = centerX + ((normX / dist) * (dist + paddingX));\n            y2 = centerY + ((normY / dist) * (dist + paddingY));\n        }\n\n        context.save();\n        context.beginPath();\n\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n        context.lineTo(x2, y2);\n\n        context.closePath();\n\n        context.clip();\n\n        // Compute matrix transform\n        const delta = (u0 * v1) + (v0 * u2) + (u1 * v2) - (v1 * u2) - (v0 * u1) - (u0 * v2);\n        const deltaA = (x0 * v1) + (v0 * x2) + (x1 * v2) - (v1 * x2) - (v0 * x1) - (x0 * v2);\n        const deltaB = (u0 * x1) + (x0 * u2) + (u1 * x2) - (x1 * u2) - (x0 * u1) - (u0 * x2);\n        const deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);\n        const deltaD = (y0 * v1) + (v0 * y2) + (y1 * v2) - (v1 * y2) - (v0 * y1) - (y0 * v2);\n        const deltaE = (u0 * y1) + (y0 * u2) + (u1 * y2) - (y1 * u2) - (y0 * u1) - (u0 * y2);\n        const deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);\n\n        context.transform(\n            deltaA / delta,\n            deltaD / delta,\n            deltaB / delta,\n            deltaE / delta,\n            deltaC / delta,\n            deltaF / delta\n        );\n\n        context.drawImage(\n            textureSource,\n            0,\n            0,\n            textureWidth * base.resolution,\n            textureHeight * base.resolution,\n            0,\n            0,\n            textureWidth,\n            textureHeight\n        );\n\n        context.restore();\n        this.renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Renders a flat Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - The Mesh to render\n     */\n    renderMeshFlat(mesh)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.getBuffer('aVertexPosition').data;\n        const length = vertices.length / 2;\n\n        // this.count++;\n\n        context.beginPath();\n\n        for (let i = 1; i < length - 2; ++i)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            const x0 = vertices[index];\n            const y0 = vertices[index + 1];\n\n            const x1 = vertices[index + 2];\n            const y1 = vertices[index + 3];\n\n            const x2 = vertices[index + 4];\n            const y2 = vertices[index + 5];\n\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.lineTo(x2, y2);\n        }\n\n        context.fillStyle = '#FF0000';\n        context.fill();\n        context.closePath();\n    }\n\n    /**\n     * destroy the the renderer.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Default `canvasPadding` for canvas-based Mesh rendering.\n *\n * @see PIXI.Mesh2d#canvasPadding\n * @static\n * @name MESH_CANVAS_PADDING\n * @memberof PIXI.settings\n * @type {number}\n * @default 0\n */\nsettings.MESH_CANVAS_PADDING = 0;\n\nexport { settings };\n","import { MeshMaterial } from '@pixi/mesh';\n\n/**\n * Renders the mesh using the Canvas renderer\n *\n * @protected\n * @method render\n * @memberof PIXI.MeshMaterial#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n * @param {PIXI.Mesh} mesh - Mesh to render.\n */\nMeshMaterial.prototype._renderCanvas = function _renderCanvas(renderer, mesh)\n{\n    renderer.plugins.mesh.render(mesh);\n};\n","import { canvasUtils } from '@pixi/canvas-renderer';\nimport { NineSlicePlane } from '@pixi/mesh-extras';\n\n/**\n * Cached tint value so we can tell when the tint is changed.\n * @memberof PIXI.NineSlicePlane#\n * @member {number} _cachedTint\n * @protected\n */\nNineSlicePlane.prototype._cachedTint = 0xFFFFFF;\n\n/**\n * Cached tinted texture.\n * @memberof PIXI.NineSlicePlane#\n * @member {HTMLCanvasElement} _tintedCanvas\n * @protected\n */\nNineSlicePlane.prototype._tintedCanvas = null;\n\n/**\n * Temporary storage for canvas source coords\n * @memberof PIXI.NineSlicePlane#\n * @member {number[]} _canvasUvs\n * @private\n */\nNineSlicePlane.prototype._canvasUvs = null;\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.NineSlicePlane#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n */\nNineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    const isTinted = this.tint !== 0xFFFFFF;\n    const texture = this.texture;\n\n    if (!texture.valid)\n    {\n        return;\n    }\n\n    // Work out tinting\n    if (isTinted)\n    {\n        if (this._cachedTint !== this.tint)\n        {\n            // Tint has changed, need to update the tinted texture and use that instead\n\n            this._cachedTint = this.tint;\n\n            this._tintedCanvas = canvasUtils.getTintedCanvas(this, this.tint);\n        }\n    }\n\n    const textureSource = !isTinted ? texture.baseTexture.getDrawableSource() : this._tintedCanvas;\n\n    if (!this._canvasUvs)\n    {\n        this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    const vertices = this.vertices;\n    const uvs = this._canvasUvs;\n    const u0 = isTinted ? 0 : texture.frame.x;\n    const v0 = isTinted ? 0 : texture.frame.y;\n    const u1 = u0 + texture.frame.width;\n    const v1 = v0 + texture.frame.height;\n\n    uvs[0] = u0;\n    uvs[1] = u0 + this._leftWidth;\n    uvs[2] = u1 - this._rightWidth;\n    uvs[3] = u1;\n    uvs[4] = v0;\n    uvs[5] = v0 + this._topHeight;\n    uvs[6] = v1 - this._bottomHeight;\n    uvs[7] = v1;\n\n    for (let i = 0; i < 8; i++)\n    {\n        uvs[i] *= texture.baseTexture.resolution;\n    }\n\n    context.globalAlpha = this.worldAlpha;\n    renderer.setBlendMode(this.blendMode);\n    renderer.setContextTransform(transform, this.roundPixels);\n\n    for (let row = 0; row < 3; row++)\n    {\n        for (let col = 0; col < 3; col++)\n        {\n            const ind = (col * 2) + (row * 8);\n            const sw = Math.max(1, uvs[col + 1] - uvs[col]);\n            const sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n            const dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n            const dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n\n            context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh,\n                vertices[ind], vertices[ind + 1], dw, dh);\n        }\n    }\n};\n","import { Mesh } from '@pixi/mesh';\nimport { settings } from './settings';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nMesh.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.shader.uvMatrix)\n    {\n        this.shader.uvMatrix.update();\n        this.calculateUvs();\n    }\n\n    this.material._renderCanvas(renderer, this);\n};\n\n// IMPORTANT: Please do NOT use this as a precedent to use `settings` after the object is created\n// this was merely created to completely decouple canvas from the base Mesh class and we are\n// unable to add `canvasPadding` in the constructor anymore, as the case was for PixiJS v4.\n\n/**\n * Internal variable for `canvasPadding`.\n *\n * @private\n * @memberof PIXI.Mesh\n * @member {number}\n * @default null\n */\nMesh.prototype._canvasPadding = null;\n\n/**\n * Triangles in canvas mode are automatically antialiased, use this value to force triangles\n * to overlap a bit with each other. To set the global default, set {@link PIXI.settings.MESH_CANVAS_PADDING}\n *\n * @see PIXI.settings.MESH_CANVAS_PADDING\n * @member {number} canvasPadding\n * @memberof PIXI.SimpleMesh#\n * @default 0\n */\nObject.defineProperty(Mesh.prototype, 'canvasPadding', {\n    get()\n    {\n        return this._canvasPadding !== null ? this._canvasPadding : settings.MESH_CANVAS_PADDING;\n    },\n    set(value)\n    {\n        this._canvasPadding = value;\n    },\n});\n","import { SimpleMesh } from '@pixi/mesh-extras';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleMesh.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.autoUpdate)\n    {\n        this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n","import { SimpleRope } from '@pixi/mesh-extras';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @protected\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleRope.prototype._renderCanvas = function _renderCanvas(renderer)\n{\n    if (this.autoUpdate\n        || this.geometry._width !== this.shader.texture.height)\n    {\n        this.geometry._width = this.shader.texture.height;\n        this.geometry.update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n"],"names":["CanvasMeshRenderer","renderer","this","render","mesh","const","transform","worldTransform","context","globalAlpha","worldAlpha","setBlendMode","blendMode","setContextTransform","roundPixels","drawMode","DRAW_MODES","TRIANGLES","_renderTriangleMesh","_renderTriangles","length","geometry","buffers","data","i","index","_renderDrawTriangle","indices","getIndex","index0","index1","index2","vertices","texture","valid","base","baseTexture","textureSource","getDrawableSource","textureWidth","width","textureHeight","height","u0","uvs","u1","u2","v0","v1","v2","x0","x1","x2","y0","y1","y2","canvasPadding","resolution","paddingX","Math","abs","a","paddingY","d","centerX","centerY","normX","normY","dist","sqrt","save","beginPath","moveTo","lineTo","closePath","clip","delta","deltaA","deltaB","deltaC","deltaD","deltaE","deltaF","drawImage","restore","invalidateBlendMode","renderMeshFlat","getBuffer","let","fillStyle","fill","destroy","MESH_CANVAS_PADDING","prototype","_renderCanvas","plugins","_cachedTint","_tintedCanvas","_canvasUvs","isTinted","tint","canvasUtils","getTintedCanvas","frame","x","y","_leftWidth","_rightWidth","_topHeight","_bottomHeight","row","col","ind","sw","max","sh","dw","dh","shader","uvMatrix","update","calculateUvs","material","_canvasPadding","Object","defineProperty","Mesh","get","settings","set","value","autoUpdate","_width"],"mappings":"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"}