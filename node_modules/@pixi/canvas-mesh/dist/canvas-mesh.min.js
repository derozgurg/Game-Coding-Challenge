/*!
 * @pixi/canvas-mesh - v5.2.4
 * Compiled Sun, 03 May 2020 22:38:52 UTC
 *
 * @pixi/canvas-mesh is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
this.PIXI=this.PIXI||{};var _pixi_canvas_mesh=function(e,t,r,a,i,s){"use strict";var n=function(e){this.renderer=e};return n.prototype.render=function(e){var r=this.renderer,a=e.worldTransform;r.context.globalAlpha=e.worldAlpha,r.setBlendMode(e.blendMode),r.setContextTransform(a,e.roundPixels),e.drawMode!==t.DRAW_MODES.TRIANGLES?this._renderTriangleMesh(e):this._renderTriangles(e)},n.prototype._renderTriangleMesh=function(e){for(var t=e.geometry.buffers[0].data.length,r=0;r<t-2;r++){var a=2*r;this._renderDrawTriangle(e,a,a+2,a+4)}},n.prototype._renderTriangles=function(e){for(var t=e.geometry.getIndex().data,r=t.length,a=0;a<r;a+=3){var i=2*t[a],s=2*t[a+1],n=2*t[a+2];this._renderDrawTriangle(e,i,s,n)}},n.prototype._renderDrawTriangle=function(e,t,r,a){var i=this.renderer.context,s=e.geometry.buffers[0].data,n=e.uvs,h=e.texture;if(h.valid){var o=h.baseTexture,d=o.getDrawableSource(),l=o.width,v=o.height,u=n[t]*o.width,c=n[r]*o.width,p=n[a]*o.width,g=n[t+1]*o.height,f=n[r+1]*o.height,_=n[a+1]*o.height,m=s[t],M=s[r],P=s[a],y=s[t+1],x=s[r+1],T=s[a+1],I=e.canvasPadding/this.renderer.resolution;if(I>0){var w=I/Math.abs(e.worldTransform.a),b=I/Math.abs(e.worldTransform.d),C=(m+M+P)/3,S=(y+x+T)/3,A=m-C,D=y-S,U=Math.sqrt(A*A+D*D);m=C+A/U*(U+w),y=S+D/U*(U+b),D=x-S,M=C+(A=M-C)/(U=Math.sqrt(A*A+D*D))*(U+w),x=S+D/U*(U+b),D=T-S,P=C+(A=P-C)/(U=Math.sqrt(A*A+D*D))*(U+w),T=S+D/U*(U+b)}i.save(),i.beginPath(),i.moveTo(m,y),i.lineTo(M,x),i.lineTo(P,T),i.closePath(),i.clip();var N=u*f+g*p+c*_-f*p-g*c-u*_,X=m*f+g*P+M*_-f*P-g*M-m*_,B=u*M+m*p+c*P-M*p-m*c-u*P,E=u*f*P+g*M*p+m*c*_-m*f*p-g*c*P-u*M*_,H=y*f+g*T+x*_-f*T-g*x-y*_,R=u*x+y*p+c*T-x*p-y*c-u*T,V=u*f*T+g*x*p+y*c*_-y*f*p-g*c*T-u*x*_;i.transform(X/N,H/N,B/N,R/N,E/N,V/N),i.drawImage(d,0,0,l*o.resolution,v*o.resolution,0,0,l,v),i.restore(),this.renderer.invalidateBlendMode()}},n.prototype.renderMeshFlat=function(e){var t=this.renderer.context,r=e.geometry.getBuffer("aVertexPosition").data,a=r.length/2;t.beginPath();for(var i=1;i<a-2;++i){var s=2*i,n=r[s],h=r[s+1],o=r[s+2],d=r[s+3],l=r[s+4],v=r[s+5];t.moveTo(n,h),t.lineTo(o,d),t.lineTo(l,v)}t.fillStyle="#FF0000",t.fill(),t.closePath()},n.prototype.destroy=function(){this.renderer=null},r.settings.MESH_CANVAS_PADDING=0,a.MeshMaterial.prototype._renderCanvas=function(e,t){e.plugins.mesh.render(t)},s.NineSlicePlane.prototype._cachedTint=16777215,s.NineSlicePlane.prototype._tintedCanvas=null,s.NineSlicePlane.prototype._canvasUvs=null,s.NineSlicePlane.prototype._renderCanvas=function(e){var t=e.context,r=this.worldTransform,a=16777215!==this.tint,s=this.texture;if(s.valid){a&&this._cachedTint!==this.tint&&(this._cachedTint=this.tint,this._tintedCanvas=i.canvasUtils.getTintedCanvas(this,this.tint));var n=a?this._tintedCanvas:s.baseTexture.getDrawableSource();this._canvasUvs||(this._canvasUvs=[0,0,0,0,0,0,0,0]);var h=this.vertices,o=this._canvasUvs,d=a?0:s.frame.x,l=a?0:s.frame.y,v=d+s.frame.width,u=l+s.frame.height;o[0]=d,o[1]=d+this._leftWidth,o[2]=v-this._rightWidth,o[3]=v,o[4]=l,o[5]=l+this._topHeight,o[6]=u-this._bottomHeight,o[7]=u;for(var c=0;c<8;c++)o[c]*=s.baseTexture.resolution;t.globalAlpha=this.worldAlpha,e.setBlendMode(this.blendMode),e.setContextTransform(r,this.roundPixels);for(var p=0;p<3;p++)for(var g=0;g<3;g++){var f=2*g+8*p,_=Math.max(1,o[g+1]-o[g]),m=Math.max(1,o[p+5]-o[p+4]),M=Math.max(1,h[f+10]-h[f]),P=Math.max(1,h[f+11]-h[f+1]);t.drawImage(n,o[g],o[p+4],_,m,h[f],h[f+1],M,P)}}},a.Mesh.prototype._renderCanvas=function(e){this.shader.uvMatrix&&(this.shader.uvMatrix.update(),this.calculateUvs()),this.material._renderCanvas(e,this)},a.Mesh.prototype._canvasPadding=null,Object.defineProperty(a.Mesh.prototype,"canvasPadding",{get:function(){return null!==this._canvasPadding?this._canvasPadding:r.settings.MESH_CANVAS_PADDING},set:function(e){this._canvasPadding=e}}),s.SimpleMesh.prototype._renderCanvas=function(e){this.autoUpdate&&this.geometry.getBuffer("aVertexPosition").update(),this.shader.update&&this.shader.update(),this.calculateUvs(),this.material._renderCanvas(e,this)},s.SimpleRope.prototype._renderCanvas=function(e){(this.autoUpdate||this.geometry._width!==this.shader.texture.height)&&(this.geometry._width=this.shader.texture.height,this.geometry.update()),this.shader.update&&this.shader.update(),this.calculateUvs(),this.material._renderCanvas(e,this)},e.CanvasMeshRenderer=n,e}({},PIXI,PIXI,PIXI,PIXI,PIXI);Object.assign(this.PIXI,_pixi_canvas_mesh);
//# sourceMappingURL=canvas-mesh.min.js.map
