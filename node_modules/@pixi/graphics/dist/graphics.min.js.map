{"version":3,"file":"graphics.min.js","sources":["../src/const.js","../src/styles/FillStyle.js","../src/utils/buildPoly.js","../src/utils/buildCircle.js","../src/utils/buildRectangle.js","../src/utils/buildRoundedRectangle.js","../src/utils/buildLine.js","../src/utils/Star.js","../src/utils/ArcUtils.js","../src/utils/BezierUtils.js","../src/utils/QuadraticUtils.js","../src/utils/BatchPart.js","../src/utils/index.js","../src/utils/buildComplexPoly.js","../src/utils/bezierCurveTo.js","../src/GraphicsData.js","../src/GraphicsGeometry.js","../src/styles/LineStyle.js","../src/Graphics.js"],"sourcesContent":["/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nexport const GRAPHICS_CURVES = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments: 2048,\n    _segmentsCount(length, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n","import { Texture } from '@pixi/core';\n\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\nexport class FillStyle\n{\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.FillStyle}\n     */\n    clone()\n    {\n        const obj = new FillStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n\n        return obj;\n    }\n\n    /**\n     * Reset\n     */\n    reset()\n    {\n        /**\n         * The hex color value used when coloring the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.color = 0xFFFFFF;\n\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.alpha = 1;\n\n        /**\n         * The texture to be used for the fill.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.texture = Texture.WHITE;\n\n        /**\n         * The transform aplpied to the texture.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.matrix = null;\n\n        /**\n         * If the current fill is visible.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.visible = false;\n    }\n\n    /**\n     * Destroy and don't use after this\n     */\n    destroy()\n    {\n        this.texture = null;\n        this.matrix = null;\n    }\n}\n","import { earcut } from '@pixi/utils';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = graphicsData.shape.points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n","import { SHAPES } from '@pixi/math';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildCircle = {\n\n    build(graphicsData)\n    {\n        // need to convert points to a nice regular data\n        const circleData = graphicsData.shape;\n        const points = graphicsData.points;\n        const x = circleData.x;\n        const y = circleData.y;\n        let width;\n        let height;\n\n        points.length = 0;\n\n        // TODO - bit hacky??\n        if (graphicsData.type === SHAPES.CIRC)\n        {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else\n        {\n            width = circleData.width;\n            height = circleData.height;\n        }\n\n        if (width === 0 || height === 0)\n        {\n            return;\n        }\n\n        let totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n        totalSegs /= 2.3;\n\n        const seg = (Math.PI * 2) / totalSegs;\n\n        for (let i = 0; i < totalSegs - 0.5; i++)\n        {\n            points.push(\n                x + (Math.sin(-seg * i) * width),\n                y + (Math.cos(-seg * i) * height)\n            );\n        }\n\n        points.push(points[0], points[1]);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        let vertPos = verts.length / 2;\n        const center = vertPos;\n\n        const circle = graphicsData.shape;\n        const matrix = graphicsData.matrix;\n        const x = circle.x;\n        const y = circle.y;\n\n        // Push center (special point)\n        verts.push(\n            graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x,\n            graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n    },\n};\n","/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n","import { earcut } from '@pixi/utils';\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRoundedRectangle = {\n\n    build(graphicsData)\n    {\n        const rrectData = graphicsData.shape;\n        const points = graphicsData.points;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        // Don't allow negative radius or greater than half the smallest width\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n\n        points.length = 0;\n\n        // No radius, do a simple rectangle\n        if (!radius)\n        {\n            points.push(x, y,\n                x + width, y,\n                x + width, y + height,\n                x, y + height);\n        }\n        else\n        {\n            quadraticBezierCurve(x, y + radius,\n                x, y,\n                x + radius, y,\n                points);\n            quadraticBezierCurve(x + width - radius,\n                y, x + width, y,\n                x + width, y + radius,\n                points);\n            quadraticBezierCurve(x + width, y + height - radius,\n                x + width, y + height,\n                x + width - radius, y + height,\n                points);\n            quadraticBezierCurve(x + radius, y + height,\n                x, y + height,\n                x, y + height - radius,\n                points);\n        }\n\n        // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n        // TODO - fix this properly, this is not very elegant.. but it works for now.\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        const vecPos = verts.length / 2;\n\n        const triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = triangles.length; i < j; i += 3)\n        {\n            indices.push(triangles[i] + vecPos);\n            //     indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            //   indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n        }\n    },\n};\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1, n2, perc)\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out = [])\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n","import { Point, SHAPES } from '@pixi/math';\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport function buildLine(graphicsData, graphicsGeometry)\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData, graphicsGeometry)\n{\n    const shape = graphicsData.shape;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = lastPoint.x + ((firstPoint.x - lastPoint.x) * 0.5);\n        const midPointY = lastPoint.y + ((firstPoint.y - lastPoint.y) * 0.5);\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    let indexStart = verts.length / 2;\n\n    // DRAW the Line\n    const width = style.width / 2;\n\n    // sort color\n    let p1x = points[0];\n    let p1y = points[1];\n    let p2x = points[2];\n    let p2y = points[3];\n    let p3x = 0;\n    let p3y = 0;\n\n    let perpx = -(p1y - p2y);\n    let perpy = p1x - p2x;\n    let perp2x = 0;\n    let perp2y = 0;\n    let perp3x = 0;\n    let perp3y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const r1 = (1 - ratio) * 2;\n    const r2 = ratio * 2;\n\n    // start\n    verts.push(\n        p1x - (perpx * r1),\n        p1y - (perpy * r1));\n\n    verts.push(\n        p1x + (perpx * r2),\n        p1y + (perpy * r2));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        p1x = points[(i - 1) * 2];\n        p1y = points[((i - 1) * 2) + 1];\n\n        p2x = points[i * 2];\n        p2y = points[(i * 2) + 1];\n\n        p3x = points[(i + 1) * 2];\n        p3y = points[((i + 1) * 2) + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt((perp2x * perp2x) + (perp2y * perp2y));\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        const a1 = (-perpy + p1y) - (-perpy + p2y);\n        const b1 = (-perpx + p2x) - (-perpx + p1x);\n        const c1 = ((-perpx + p1x) * (-perpy + p2y)) - ((-perpx + p2x) * (-perpy + p1y));\n        const a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        const b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        const c2 = ((-perp2x + p3x) * (-perp2y + p2y)) - ((-perp2x + p2x) * (-perp2y + p3y));\n\n        let denom = (a1 * b2) - (a2 * b1);\n\n        if (Math.abs(denom) < 0.1)\n        {\n            denom += 10.1;\n            verts.push(\n                p2x - (perpx * r1),\n                p2y - (perpy * r1));\n\n            verts.push(\n                p2x + (perpx * r2),\n                p2y + (perpy * r2));\n\n            continue;\n        }\n\n        const px = ((b1 * c2) - (b2 * c1)) / denom;\n        const py = ((a2 * c1) - (a1 * c2)) / denom;\n        const pdist = ((px - p2x) * (px - p2x)) + ((py - p2y) * (py - p2y));\n\n        if (pdist > (196 * width * width))\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt((perp3x * perp3x) + (perp3y * perp3y));\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - (perp3x * r1), p2y - (perp3y * r1));\n\n            verts.push(p2x + (perp3x * r2), p2y + (perp3y * r2));\n\n            verts.push(p2x - (perp3x * r2 * r1), p2y - (perp3y * r1));\n\n            indexCount++;\n        }\n        else\n        {\n            verts.push(p2x + ((px - p2x) * r1), p2y + ((py - p2y) * r1));\n\n            verts.push(p2x - ((px - p2x) * r2), p2y - ((py - p2y) * r2));\n        }\n    }\n\n    p1x = points[(length - 2) * 2];\n    p1y = points[((length - 2) * 2) + 1];\n\n    p2x = points[(length - 1) * 2];\n    p2y = points[((length - 1) * 2) + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - (perpx * r1), p2y - (perpy * r1));\n\n    verts.push(p2x + (perpx * r2), p2y + (perpy * r2));\n\n    const indices = graphicsGeometry.indices;\n\n    // indices.push(indexStart);\n\n    for (let i = 0; i < indexCount - 2; ++i)\n    {\n        indices.push(indexStart, indexStart + 1, indexStart + 2);\n\n        indexStart++;\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData, graphicsGeometry)\n{\n    let i = 0;\n\n    const shape = graphicsData.shape;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n","import { Polygon, PI_2 } from '@pixi/math';\n\n/**\n * Draw a star shape with an arbitrary number of points.\n *\n * @class\n * @extends PIXI.Polygon\n * @memberof PIXI\n * @param {number} x - Center X position of the star\n * @param {number} y - Center Y position of the star\n * @param {number} points - The number of points of the star, must be > 1\n * @param {number} radius - The outer radius of the star\n * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport class Star extends Polygon\n{\n    constructor(x, y, points, radius, innerRadius, rotation)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        super(polygon);\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\nimport { PI_2 } from '@pixi/math';\n\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @private\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1, y1, x2, y2, radius, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @private\n     * @param {number} startX - Start x location of arc\n     * @param {number} startY - Start y location of arc\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param {number} n - Number of segments\n     * @param {number[]} points - Collection of points to add to\n     */\n    static arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points)\n    {\n        const sweep = endAngle - startAngle;\n        const n = GRAPHICS_CURVES._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\nexport class BezierUtils\n{\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    static curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     *\n     * @ignore\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Path array to push points into\n     */\n    static curveTo(cpX, cpY, cpX2, cpY2, toX, toY, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        );\n\n        let dt = 0;\n        let dt2 = 0;\n        let dt3 = 0;\n        let t2 = 0;\n        let t3 = 0;\n\n        points.push(fromX, fromY);\n\n        for (let i = 1, j = 0; i <= n; ++i)\n        {\n            j = i / n;\n\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n\n            t2 = j * j;\n            t3 = t2 * j;\n\n            points.push(\n                (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n                (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n            );\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    static curveLength(fromX, fromY, cpX, cpY, toX, toY)\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @private\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Points to add segments to.\n     */\n    static curveTo(cpX, cpY, toX, toY, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n","/**\n * A structure to hold interim batch objects for Graphics.\n * @class\n * @memberof PIXI.graphicsUtils\n */\nexport class BatchPart\n{\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Begin batch part\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} style\n     * @param {number} startIndex\n     * @param {number} attribStart\n     */\n    begin(style, startIndex, attribStart)\n    {\n        this.reset();\n        this.style = style;\n        this.start = startIndex;\n        this.attribStart = attribStart;\n    }\n\n    /**\n     * End batch part\n     *\n     * @param {number} endIndex\n     * @param {number} endAttrib\n     */\n    end(endIndex, endAttrib)\n    {\n        this.attribSize = endAttrib - this.attribStart;\n        this.size = endIndex - this.start;\n    }\n\n    reset()\n    {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    }\n}\n","/**\n * Generalized convenience utilities for Graphics.\n *\n * @namespace PIXI.graphicsUtils\n */\n\nimport { buildPoly } from './buildPoly';\nexport { buildPoly };\n\nimport { buildCircle } from './buildCircle';\nexport { buildCircle };\n\nimport { buildRectangle } from './buildRectangle';\nexport { buildRectangle };\n\nimport { buildRoundedRectangle } from './buildRoundedRectangle';\nexport { buildRoundedRectangle };\n\nexport * from './buildLine';\nexport * from './buildComplexPoly';\nexport * from './bezierCurveTo';\nexport * from './Star';\nexport * from './ArcUtils';\nexport * from './BezierUtils';\nexport * from './QuadraticUtils';\nexport * from './BatchPart';\n\nimport { SHAPES } from '@pixi/math';\n\n/**\n * Map of fill commands for each shape type.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Object}\n */\nexport const FILL_COMMANDS = {\n    [SHAPES.POLY]: buildPoly,\n    [SHAPES.CIRC]: buildCircle,\n    [SHAPES.ELIP]: buildCircle,\n    [SHAPES.RECT]: buildRectangle,\n    [SHAPES.RREC]: buildRoundedRectangle,\n};\n\n/**\n * Batch pool, stores unused batches for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @type {Array<PIXI.graphicsUtils.BatchPart>}\n */\nexport const BATCH_POOL = [];\n\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @type {Array<PIXI.BatchDrawCall>}\n */\nexport const DRAW_CALL_POOL = [];\n","import { hex2rgb } from '@pixi/utils';\n\n/**\n * Builds a complex polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.Graphics} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n */\nexport function buildComplexPoly(graphicsData, webGLData)\n{\n    // TODO - no need to copy this as it gets turned into a Float32Array anyways..\n    const points = graphicsData.points.slice();\n\n    if (points.length < 6)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n    const indices = webGLData.indices;\n\n    webGLData.points = points;\n    webGLData.alpha = graphicsData.fillAlpha;\n    webGLData.color = hex2rgb(graphicsData.fillColor);\n\n    // calculate the bounds..\n    let minX = Infinity;\n    let maxX = -Infinity;\n\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    let x = 0;\n    let y = 0;\n\n    // get size..\n    for (let i = 0; i < points.length; i += 2)\n    {\n        x = points[i];\n        y = points[i + 1];\n\n        minX = x < minX ? x : minX;\n        maxX = x > maxX ? x : maxX;\n\n        minY = y < minY ? y : minY;\n        maxY = y > maxY ? y : maxY;\n    }\n\n    // add a quad to the end cos there is no point making another buffer!\n    points.push(minX, minY,\n        maxX, minY,\n        maxX, maxY,\n        minX, maxY);\n\n    // push a quad onto the end..\n\n    // TODO - this ain't needed!\n    const length = points.length / 2;\n\n    for (let i = 0; i < length; i++)\n    {\n        indices.push(i);\n    }\n}\n","/**\n * Calculate the points for a bezier curve and then draws it.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @param {number} fromX - Starting point x\n * @param {number} fromY - Starting point y\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} cpX2 - Second Control point x\n * @param {number} cpY2 - Second Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number} n - Number of segments approximating the bezier curve\n * @param {number[]} [path=[]] - Path array to push points into\n * @return {number[]} Array of points of the curve\n */\nexport function bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n, path = [])\n{\n    let dt = 0;\n    let dt2 = 0;\n    let dt3 = 0;\n    let t2 = 0;\n    let t3 = 0;\n\n    path.push(fromX, fromY);\n\n    for (let i = 1, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        dt = (1 - j);\n        dt2 = dt * dt;\n        dt3 = dt2 * dt;\n\n        t2 = j * j;\n        t3 = t2 * j;\n\n        path.push(\n            (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n            (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n        );\n    }\n\n    return path;\n}\n","/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\nexport class GraphicsData\n{\n    /**\n     *\n     * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n     * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n     * @param {PIXI.Matrix} [matrix] - Transform matrix\n     */\n    constructor(shape, fillStyle = null, lineStyle = null, matrix = null)\n    {\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle}\n         */\n        this.lineStyle = lineStyle;\n\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle}\n         */\n        this.fillStyle = fillStyle;\n\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix}\n         */\n        this.matrix = matrix;\n\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n\n        /**\n         * The collection of points.\n         * @member {number[]}\n         */\n        this.points = [];\n\n        /**\n         * The collection of holes.\n         * @member {PIXI.GraphicsData[]}\n         */\n        this.holes = [];\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    clone()\n    {\n        return new GraphicsData(\n            this.shape,\n            this.fillStyle,\n            this.lineStyle,\n            this.matrix\n        );\n    }\n\n    /**\n     * Destroys the Graphics data.\n     */\n    destroy()\n    {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    }\n}\n","import {\n    buildLine,\n    buildPoly,\n    BatchPart,\n    FILL_COMMANDS,\n    BATCH_POOL,\n    DRAW_CALL_POOL } from './utils';\n\nimport {\n    BatchGeometry,\n    BatchDrawCall,\n    BatchTextureArray,\n    BaseTexture } from '@pixi/core';\n\nimport { DRAW_MODES, WRAP_MODES } from '@pixi/constants';\nimport { SHAPES, Point, Matrix } from '@pixi/math';\nimport { GraphicsData } from './GraphicsData';\nimport { premultiplyTint } from '@pixi/utils';\nimport { Bounds } from '@pixi/display';\n\nconst tmpPoint = new Point();\nconst tmpBounds = new Bounds();\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\nexport class GraphicsGeometry extends BatchGeometry\n{\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of points to draw, 2 numbers per point\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.points = [];\n\n        /**\n         * The collection of colors\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.colors = [];\n\n        /**\n         * The UVs collection\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.uvs = [];\n\n        /**\n         * The indices of the vertices\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.indices = [];\n\n        /**\n         * Reference to the texture IDs.\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.textureIds = [];\n\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @protected\n         */\n        this.graphicsData = [];\n\n        /**\n         * Used to detect if the graphics object has changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.dirty = 0;\n\n        /**\n         * Batches need to regenerated if the geometry is updated.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Used to check if the cache is dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.cacheDirty = -1;\n\n        /**\n         * Used to detect if we cleared the graphicsData.\n         *\n         * @member {number}\n         * @default 0\n         * @protected\n         */\n        this.clearDirty = 0;\n\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {object[]}\n         * @protected\n         */\n        this.drawCalls = [];\n\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {PIXI.graphicsUtils.BatchPart[]}\n         * @protected\n         */\n        this.batches = [];\n\n        /**\n         * Index of the last batched shape in the stack of calls.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.shapeIndex = 0;\n\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        this._bounds = new Bounds();\n\n        /**\n         * The bounds dirty flag.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Padding to add to the bounds.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.boundsPadding = 0;\n\n        this.batchable = false;\n\n        this.indicesUint16 = null;\n\n        this.uvsFloat32 = null;\n\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         *\n         * @member {number}\n         */\n        this.closePointEps = 1e-4;\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n    get bounds()\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n    invalidate()\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].textures.length = 0;\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchPart = this.batches[i];\n\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n\n        this.batches.length = 0;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n     */\n    clear()\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n     * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    drawShape(shape, fillStyle, lineStyle, matrix)\n    {\n        const data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    drawHole(shape, matrix)\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new GraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.Point} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n    containsPoint(point)\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     */\n    updateBatches()\n    {\n        if (!this.graphicsData.length)\n        {\n            this.batchable = true;\n\n            return;\n        }\n\n        if (!this.validateBatching())\n        {\n            return;\n        }\n\n        this.cacheDirty = this.dirty;\n\n        const uvs = this.uvs;\n        const graphicsData = this.graphicsData;\n\n        let batchPart = null;\n\n        let currentStyle = null;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n\n        for (let i = this.shapeIndex; i < graphicsData.length; i++)\n        {\n            this.shapeIndex++;\n\n            const data = graphicsData[i];\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n            const command = FILL_COMMANDS[data.type];\n\n            // build out the shapes points..\n            command.build(data);\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n                const index = this.indices.length;\n                const attribIndex = this.points.length / 2;\n\n                nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                if (j === 0)\n                {\n                    this.processFill(data);\n                }\n                else\n                {\n                    this.processLine(data);\n                }\n\n                const size = (this.points.length / 2) - attribIndex;\n\n                if (size === 0) continue;\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style))\n                {\n                    batchPart.end(index, attribIndex);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, index, attribIndex);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n\n                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n            }\n        }\n\n        if (batchPart)\n        {\n            const index = this.indices.length;\n            const attrib = this.points.length / 2;\n\n            batchPart.end(index, attrib);\n        }\n\n        if (this.batches.length === 0)\n        {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        this.indicesUint16 = new Uint16Array(this.indices);\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.packBatches();\n        }\n        else\n        {\n            this.buildDrawCalls();\n        }\n    }\n\n    /**\n     * Affinity check\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n     */\n    _compareStyles(styleA, styleB)\n    {\n        if (!styleA || !styleB)\n        {\n            return false;\n        }\n\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture)\n        {\n            return false;\n        }\n\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha)\n        {\n            return false;\n        }\n\n        if (!!styleA.native !== !!styleB.native)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Test geometry for batching process.\n     *\n     * @protected\n     */\n    validateBatching()\n    {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n        {\n            return false;\n        }\n\n        for (let i = 0, l = this.graphicsData.length; i < l; i++)\n        {\n            const data = this.graphicsData[i];\n            const fill = data.fillStyle;\n            const line = data.lineStyle;\n\n            if (fill && !fill.texture.baseTexture.valid) return false;\n            if (line && !line.texture.baseTexture.valid) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Offset the indices so that it works with the batcher.\n     *\n     * @protected\n     */\n    packBatches()\n    {\n        this.batchDirty++;\n        this.uvsFloat32 = new Float32Array(this.uvs);\n\n        const batches = this.batches;\n\n        for (let i = 0, l = batches.length; i < l; i++)\n        {\n            const batch = batches[i];\n\n            for (let j = 0; j < batch.size; j++)\n            {\n                const index = batch.start + j;\n\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    }\n\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     *\n     * @protected\n     */\n    isBatchable()\n    {\n        const batches = this.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            if (batches[i].style.native)\n            {\n                return false;\n            }\n        }\n\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /**\n     * Converts intermediate batches data to drawCalls.\n     *\n     * @protected\n     */\n    buildDrawCalls()\n    {\n        let TICK = ++BaseTexture._globalBatch;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].textures.length = 0;\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        let currentGroup =  DRAW_CALL_POOL.pop();\n\n        if (!currentGroup)\n        {\n            currentGroup = new BatchDrawCall();\n            currentGroup.textures = new BatchTextureArray();\n        }\n        currentGroup.textures.count = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = DRAW_MODES.TRIANGLES;\n\n        let textureCount = 0;\n        let currentTexture = null;\n        let textureId = 0;\n        let native = false;\n        let drawMode = DRAW_MODES.TRIANGLES;\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        // TODO - this can be simplified\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const data = this.batches[i];\n\n            // TODO add some full on MAX_TEXTURE CODE..\n            const MAX_TEXTURES = 8;\n\n            const style = data.style;\n\n            const nextTexture = style.texture.baseTexture;\n\n            if (native !== !!style.native)\n            {\n                native = !!style.native;\n                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        if (currentGroup.size > 0)\n                        {\n                            currentGroup = DRAW_CALL_POOL.pop();\n                            if (!currentGroup)\n                            {\n                                currentGroup = new BatchDrawCall();\n                                currentGroup.textures = new BatchTextureArray();\n                            }\n                            this.drawCalls.push(currentGroup);\n                        }\n\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.textures.count = 0;\n                        currentGroup.type = drawMode;\n                    }\n\n                    // TODO add this to the render part..\n                    nextTexture.touched = 1;// touch;\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._batchLocation = textureCount;\n                    nextTexture.wrapMode = 10497;\n\n                    currentGroup.textures.elements[currentGroup.textures.count++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            currentGroup.size += data.size;\n            index += data.size;\n\n            textureId = nextTexture._batchLocation;\n\n            this.addColors(colors, style.color, style.alpha, data.attribSize);\n            this.addTextureIds(textureIds, textureId, data.attribSize);\n        }\n\n        BaseTexture._globalBatch = TICK;\n\n        // upload..\n        // merge for now!\n        this.packAttributes();\n    }\n\n    /**\n     * Packs attributes to single buffer.\n     *\n     * @protected\n     */\n    packAttributes()\n    {\n        const verts = this.points;\n        const uvs = this.uvs;\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        const glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        const f32 = new Float32Array(glPoints);\n        const u32 = new Uint32Array(glPoints);\n\n        let p = 0;\n\n        for (let i = 0; i < verts.length / 2; i++)\n        {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n\n            u32[p++] = colors[i];\n\n            f32[p++] = textureIds[i];\n        }\n\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    }\n\n    /**\n     * Process fill part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    processFill(data)\n    {\n        if (data.holes.length)\n        {\n            this.processHoles(data.holes);\n\n            buildPoly.triangulate(data, this);\n        }\n        else\n        {\n            const command = FILL_COMMANDS[data.type];\n\n            command.triangulate(data, this);\n        }\n    }\n\n    /**\n     * Process line part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    processLine(data)\n    {\n        buildLine(data, this);\n\n        for (let i = 0; i < data.holes.length; i++)\n        {\n            buildLine(data.holes[i], this);\n        }\n    }\n\n    /**\n     * Process the holes data.\n     *\n     * @param {PIXI.GraphicsData[]} holes - Holes to render\n     * @protected\n     */\n    processHoles(holes)\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n            const command = FILL_COMMANDS[hole.type];\n\n            command.build(hole);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     *\n     * @protected\n     */\n    calculateBounds()\n    {\n        const bounds = this._bounds;\n        const sequenceBounds = tmpBounds;\n        let curMatrix = Matrix.IDENTITY;\n\n        this._bounds.clear();\n        sequenceBounds.clear();\n\n        for (let i = 0; i < this.graphicsData.length; i++)\n        {\n            const data = this.graphicsData[i];\n            const shape = data.shape;\n            const type = data.type;\n            const lineStyle = data.lineStyle;\n            const nextMatrix = data.matrix || Matrix.IDENTITY;\n            let lineWidth = 0.0;\n\n            if (lineStyle && lineStyle.visible)\n            {\n                const alignment = lineStyle.alignment;\n\n                lineWidth = lineStyle.width;\n\n                if (type === SHAPES.POLY)\n                {\n                    lineWidth = lineWidth * (0.5 + Math.abs(0.5 - alignment));\n                }\n                else\n                {\n                    lineWidth = lineWidth * Math.max(0, alignment);\n                }\n            }\n\n            if (curMatrix !== nextMatrix)\n            {\n                if (!sequenceBounds.isEmpty())\n                {\n                    bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n                    sequenceBounds.clear();\n                }\n                curMatrix = nextMatrix;\n            }\n\n            if (type === SHAPES.RECT || type === SHAPES.RREC)\n            {\n                sequenceBounds.addFramePad(shape.x, shape.y, shape.x + shape.width, shape.y + shape.height,\n                    lineWidth, lineWidth);\n            }\n            else if (type === SHAPES.CIRC)\n            {\n                sequenceBounds.addFramePad(shape.x, shape.y, shape.x, shape.y,\n                    shape.radius + lineWidth, shape.radius + lineWidth);\n            }\n            else if (type === SHAPES.ELIP)\n            {\n                sequenceBounds.addFramePad(shape.x, shape.y, shape.x, shape.y,\n                    shape.width + lineWidth, shape.height + lineWidth);\n            }\n            else\n            {\n                // adding directly to the bounds\n                bounds.addVerticesMatrix(curMatrix, shape.points, 0, shape.points.length, lineWidth, lineWidth);\n            }\n        }\n\n        if (!sequenceBounds.isEmpty())\n        {\n            bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n        }\n\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    }\n\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n    transformPoints(points, matrix)\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n\n    /**\n     * Add colors.\n     *\n     * @protected\n     * @param {number[]} colors - List of colors to add to\n     * @param {number} color - Color to add\n     * @param {number} alpha - Alpha to use\n     * @param {number} size - Number of colors to add\n     */\n    addColors(colors, color, alpha, size)\n    {\n        // TODO use the premultiply bits Ivan added\n        const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n        const rgba =  premultiplyTint(rgb, alpha);\n\n        while (size-- > 0)\n        {\n            colors.push(rgba);\n        }\n    }\n\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     *\n     * @protected\n     * @param {number[]} textureIds\n     * @param {number} id\n     * @param {number} size\n     */\n    addTextureIds(textureIds, id, size)\n    {\n        while (size-- > 0)\n        {\n            textureIds.push(id);\n        }\n    }\n\n    /**\n     * Generates the UVs for a shape.\n     *\n     * @protected\n     * @param {number[]} verts - Vertices\n     * @param {number[]} uvs - UVs\n     * @param {PIXI.Texture} texture - Reference to Texture\n     * @param {number} start - Index buffer start index.\n     * @param {number} size - The size/length for index buffer.\n     * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n     */\n    addUvs(verts, uvs, texture, start, size, matrix)\n    {\n        let index = 0;\n        const uvsStart = uvs.length;\n        const frame = texture.frame;\n\n        while (index < size)\n        {\n            let x = verts[(start + index) * 2];\n            let y = verts[((start + index) * 2) + 1];\n\n            if (matrix)\n            {\n                const nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n\n            index++;\n\n            uvs.push(x / frame.width, y / frame.height);\n        }\n\n        const baseTexture = texture.baseTexture;\n\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height)\n        {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    }\n\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     *\n     * @param {number[]} uvs array\n     * @param {PIXI.Texture} texture region\n     * @param {number} start starting index for uvs\n     * @param {number} size how many points to adjust\n     */\n    adjustUvs(uvs, texture, start, size)\n    {\n        const baseTexture = texture.baseTexture;\n        const eps = 1e-6;\n        const finish = start + (size * 2);\n        const frame = texture.frame;\n        const scaleX = frame.width / baseTexture.width;\n        const scaleY = frame.height / baseTexture.height;\n        let offsetX = frame.x / frame.width;\n        let offsetY = frame.y / frame.height;\n        let minX = Math.floor(uvs[start] + eps);\n        let minY = Math.floor(uvs[start + 1] + eps);\n\n        for (let i = start + 2; i < finish; i += 2)\n        {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (let i = start; i < finish; i += 2)\n        {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    }\n}\n\n/**\n * The maximum number of points to consider an object \"batchable\",\n * able to be batched by the renderer's batch system.\n *\n * @memberof PIXI.GraphicsGeometry\n * @static\n * @member {number} BATCHABLE_SIZE\n * @default 100\n */\nGraphicsGeometry.BATCHABLE_SIZE = 100;\n","import { FillStyle } from './FillStyle';\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\nexport class LineStyle extends FillStyle\n{\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.LineStyle}\n     */\n    clone()\n    {\n        const obj = new LineStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n\n        return obj;\n    }\n    /**\n     * Reset the line style to default.\n     */\n    reset()\n    {\n        super.reset();\n\n        // Override default line style color\n        this.color = 0x0;\n\n        /**\n         * The width (thickness) of any lines drawn.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.width = 0;\n\n        /**\n         * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).\n         *\n         * @member {number}\n         * @default 0.5\n         */\n        this.alignment = 0.5;\n\n        /**\n         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.native = false;\n    }\n}\n","import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n    SHAPES,\n} from '@pixi/math';\n\nimport {\n    Texture,\n    Shader,\n    UniformGroup, State,\n} from '@pixi/core';\n\nimport {\n    BezierUtils,\n    QuadraticUtils,\n    ArcUtils,\n    Star,\n} from './utils';\n\nimport { hex2rgb, deprecation } from '@pixi/utils';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS = {};\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * Note that because Graphics can share a GraphicsGeometry with other instances,\n * it is necessary to call `destroy()` to properly dereference the underlying\n * GraphicsGeometry and avoid a memory leak. Alternatively, keep using the same\n * Graphics instance and call `clear()` between redraws.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n     *        will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry = null)\n    {\n        super();\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n         * @member {PIXI.GraphicsGeometry}\n         * @readonly\n         */\n        this.geometry = geometry || new GraphicsGeometry();\n\n        this.geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = State.for2d();\n\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle}\n         * @protected\n         */\n        this._fillStyle = new FillStyle();\n\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle}\n         * @protected\n         */\n        this._lineStyle = new LineStyle();\n\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix}\n         * @protected\n         */\n        this._matrix = null;\n\n        /**\n         * Current hole mode is enabled.\n         *\n         * @member {boolean}\n         * @default false\n         * @protected\n         */\n        this._holeMode = false;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon}\n         * @protected\n         */\n        this.currentPath = null;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @protected\n         * @member {object[]}\n         */\n        this.batches = [];\n\n        /**\n         * Update dirty for limiting calculating tints for batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchTint = -1;\n\n        /**\n         * Copy of the object vertex data.\n         *\n         * @protected\n         * @member {Float32Array}\n         */\n        this.vertexData = null;\n\n        this._transformID = -1;\n        this.batchDirty = -1;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    clone()\n    {\n        this.finishPoly();\n\n        return new Graphics(this.geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to the graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n    set tint(value)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     *\n     * @member {PIXI.FillStyle}\n     * @readonly\n     */\n    get fill()\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     *\n     * @member {PIXI.LineStyle}\n     * @readonly\n     */\n    get line()\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @method PIXI.Graphics#lineStyle\n     * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {object} [options] - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineStyle(options)\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            const args = arguments;\n\n            options = {\n                width: args[0] || 0,\n                color: args[1] || 0x0,\n                alpha: args[2] !== undefined ? args[2] : 1,\n                alignment: args[3] !== undefined ? args[3] : 0.5,\n                native: !!args[4],\n            };\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     *\n     * @param {object} [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTextureStyle(options)\n    {\n        // backward compatibility with params: (width, texture,\n        // color, alpha, matrix, alignment, native)\n        if (typeof options === 'number')\n        {\n            deprecation('v5.2.0', 'Please use object-based options for Graphics#lineTextureStyle');\n\n            const [width, texture, color, alpha, matrix, alignment, native] = arguments;\n\n            options = { width, texture, color, alpha, matrix, alignment, native };\n\n            // Remove undefined keys\n            Object.keys(options).forEach((key) => options[key] === undefined && delete options[key]);\n        }\n\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: (options && options.texture) ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally\n     * @protected\n     */\n    startPoly()\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly()\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    moveTo(x, y)\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTo(x, y)\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     *\n     * @protected\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    _initCurve(x = 0, y = 0)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    quadraticCurveTo(cpX, cpY, toX, toY)\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n     * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arcTo(x1, y1, x2, y2, radius)\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false)\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this.geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginFill(color = 0, alpha = 1)\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill\n     *\n     * @param {object} [options] - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options)\n    {\n        // backward compatibility with params: (texture, color, alpha, matrix)\n        if (options instanceof Texture)\n        {\n            deprecation('v5.2.0', 'Please use object-based options for Graphics#beginTextureFill');\n\n            const [texture, color, alpha, matrix] = arguments;\n\n            options = { texture, color, alpha, matrix };\n\n            // Remove undefined keys\n            Object.keys(options).forEach((key) => options[key] === undefined && delete options[key]);\n        }\n\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    endFill()\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRect(x, y, width, height)\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRoundedRect(x, y, width, height, radius)\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawCircle(x, y, radius)\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawEllipse(x, y, width, height)\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawPolygon(path)\n    {\n        // prevents an argument assignment deopt\n        // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n        let points = path;\n\n        let closeStroke = true;// !!this._fillStyle;\n\n        // check if data has points..\n        if (points.points)\n        {\n            closeStroke = points.closeStroke;\n            points = points.points;\n        }\n\n        if (!Array.isArray(points))\n        {\n            // prevents an argument leak deopt\n            // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n            points = new Array(arguments.length);\n\n            for (let i = 0; i < points.length; ++i)\n            {\n                points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n            }\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawShape(shape)\n    {\n        if (!this._holeMode)\n        {\n            this.geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this.geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Draw a star shape with an arbitrary number of points.\n     *\n     * @param {number} x - Center X position of the star\n     * @param {number} y - Center Y position of the star\n     * @param {number} points - The number of points of the star, must be > 1\n     * @param {number} radius - The outer radius of the star\n     * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n     * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawStar(x, y, points, radius, innerRadius, rotation = 0)\n    {\n        return this.drawPolygon(new Star(x, y, points, radius, innerRadius, rotation));\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    clear()\n    {\n        this.geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    isFastRect()\n    {\n        return this.geometry.graphicsData.length === 1\n        && this.geometry.graphicsData[0].shape.type === SHAPES.RECT\n        && !this.geometry.graphicsData[0].lineWidth;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        this.finishPoly();\n\n        const geometry = this.geometry;\n\n        // batch part..\n        // batch it!\n        geometry.updateBatches();\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /**\n     * Populating batches for rendering\n     *\n     * @protected\n     */\n    _populateBatches()\n    {\n        const geometry = this.geometry;\n        const blendMode = this.blendMode;\n\n        this.batches = [];\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0, l = geometry.batches.length; i < l; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: hex2rgb(color),\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _renderBatched(renderer)\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _renderDirect(renderer)\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this.geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     *\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BatchDrawCall} drawCall\n     */\n    _renderDrawCallDirect(renderer, drawCall)\n    {\n        const { textures, type, size, start } = drawCall;\n        const groupTextureCount = textures.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(textures.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _resolveDirectShader(renderer)\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const sampleValues = new Int32Array(16);\n\n                for (let i = 0; i < 16; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.finishPoly();\n\n        const geometry = this.geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this.geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /**\n     * Recalcuate the tint by applying tin to batches using Graphics tint.\n     * @protected\n     */\n    calculateTints()\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /**\n     * If there's a transform update or a change to the shape of the\n     * geometry, recaculate the vertices.\n     * @protected\n     */\n    calculateVertices()\n    {\n        if (this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this.geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    closePath()\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     *\n     * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    setMatrix(matrix)\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    beginHole()\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    endHole()\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this.geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n\n/**\n * Temporary point to use for containsPoint\n *\n * @static\n * @private\n * @member {PIXI.Point}\n */\nGraphics._TEMP_POINT = new Point();\n"],"names":["GRAPHICS_CURVES","adaptive","maxLength","minSegments","maxSegments","_segmentsCount","length","defaultSegments","this","isNaN","let","result","Math","ceil","FillStyle","reset","clone","const","obj","color","alpha","texture","matrix","visible","Texture","WHITE","destroy","buildPoly","build","graphicsData","points","shape","slice","triangulate","graphicsGeometry","holes","verts","indices","holeArray","i","hole","push","concat","triangles","earcut","vertPos","buildCircle","width","height","circleData","x","y","type","SHAPES","CIRC","radius","totalSegs","floor","sqrt","seg","PI","sin","cos","center","circle","a","c","tx","b","d","ty","buildRectangle","rectData","buildRoundedRectangle","rrectData","max","min","quadraticBezierCurve","vecPos","j","getPt","n1","n2","perc","fromX","fromY","cpX","cpY","toX","toY","out","xa","ya","xb","yb","buildLine","lineStyle","native","closedShape","POLY","closeStroke","startIndex","currentIndex","buildNativeLine","eps","closePointEps","style","firstPoint","Point","lastPoint","closedPath","abs","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","p1x","p1y","p2x","p2y","p3x","p3y","perpx","perpy","perp2x","perp2y","perp3x","perp3y","dist","ratio","alignment","r1","r2","a1","b1","c1","a2","b2","c2","denom","px","py","pdist","buildNonNativeLine","Star","innerRadius","rotation","startAngle","len","delta","PI_2","polygon","r","angle","super","Polygon","ArcUtils","curveTo","x1","y1","x2","y2","mm","dd","cc","tt","k1","k2","j1","j2","cx","cy","qx","qy","atan2","endAngle","anticlockwise","arc","startX","startY","sweep","n","theta","theta2","cTheta","sTheta","segMinus","remainder","s","BezierUtils","curveLength","cpX2","cpY2","t","t2","t3","nt","nt2","nt3","dx","dy","prevX","prevY","dt","dt2","dt3","QuadraticUtils","ax","ay","bx","by","a32","ba","log","BatchPart","begin","attribStart","start","end","endIndex","endAttrib","attribSize","size","FILL_COMMANDS","ELIP","RECT","RREC","BATCH_POOL","DRAW_CALL_POOL","webGLData","fillAlpha","hex2rgb","fillColor","minX","Infinity","maxX","minY","maxY","path","GraphicsData","fillStyle","tmpPoint","tmpBounds","Bounds","GraphicsGeometry","colors","uvs","textureIds","dirty","batchDirty","cacheDirty","clearDirty","drawCalls","batches","shapeIndex","_bounds","boundsDirty","boundsPadding","batchable","indicesUint16","uvsFloat32","prototypeAccessors","bounds","calculateBounds","invalidate","textures","batchPart","clear","drawShape","data","drawHole","lastShape","options","indexBuffer","containsPoint","point","applyInverse","copyFrom","contains","hitHole","updateBatches","validateBatching","currentStyle","transformPoints","nextTexture","baseTexture","index","attribIndex","wrapMode","WRAP_MODES","REPEAT","processFill","processLine","_compareStyles","addUvs","attrib","Uint16Array","isBatchable","packBatches","buildDrawCalls","styleA","styleB","l","fill","line","valid","Float32Array","batch","BATCHABLE_SIZE","TICK","BaseTexture","_globalBatch","currentGroup","BatchDrawCall","BatchTextureArray","count","DRAW_MODES","TRIANGLES","textureCount","currentTexture","textureId","drawMode","LINES","_batchEnabled","touched","_batchLocation","elements","addColors","addTextureIds","packAttributes","glPoints","ArrayBuffer","f32","u32","Uint32Array","p","_buffer","update","_indexBuffer","processHoles","sequenceBounds","curMatrix","Matrix","IDENTITY","nextMatrix","lineWidth","isEmpty","addBoundsMatrix","addFramePad","addVerticesMatrix","pad","rgb","rgba","premultiplyTint","id","uvsStart","frame","nx","adjustUvs","finish","scaleX","scaleY","offsetX","offsetY","BatchGeometry","LineStyle","temp","DEFAULT_SHADERS","Graphics","geometry","refCount","shader","state","State","for2d","_fillStyle","_lineStyle","_matrix","_holeMode","currentPath","batchTint","vertexData","_transformID","pluginName","tint","blendMode","BLEND_MODES","NORMAL","finishPoly","value","_tint","args","arguments","undefined","lineTextureStyle","deprecation","Object","keys","forEach","key","assign","startPoly","invert","moveTo","lineTo","_initCurve","quadraticCurveTo","bezierCurveTo","arcTo","xDiff","yDiff","beginFill","beginTextureFill","endFill","drawRect","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","Array","isArray","drawStar","isFastRect","_render","renderer","_populateBatches","_renderBatched","flush","_renderDirect","gI","buffer","_batchRGB","_tintRGB","_texture","worldAlpha","setObjectRenderer","plugins","calculateVertices","calculateTints","render","_resolveDirectShader","uniforms","translationMatrix","transform","worldTransform","bind","_renderDrawCallDirect","drawCall","groupTextureCount","draw","sampleValues","Int32Array","default","UniformGroup","from","uSamplers","program","_shader","Shader","_calculateBounds","addFrame","_TEMP_POINT","tintRGB","_worldID","wt","closePath","setMatrix","beginHole","endHole","dispose","Container"],"mappings":"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"}