{"version":3,"file":"canvas-prepare.min.js","sources":["../src/CanvasPrepare.js"],"sourcesContent":["import { BaseTexture } from '@pixi/core';\nimport { BasePrepare } from '@pixi/prepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas. This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.prepare`\n *\n * @class\n * @extends PIXI.BasePrepare\n * @memberof PIXI\n */\nexport class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.registerUploadHook(uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n"],"names":["const","CANVAS_START_SIZE","CanvasPrepare","renderer","super","this","uploadHookHelper","canvas","document","createElement","width","height","ctx","getContext","registerUploadHook","uploadBaseTextures","destroy","BasePrepare","prepare","item","BaseTexture","image","source","imageWidth","Math","min","imageHeight","drawImage"],"mappings":";;;;;;;8EAGAA,IAAMC,EAAoB,GAcbC,cAKT,WAAYC,GAERC,YAAMD,GAENE,KAAKC,iBAAmBD,KAOxBA,KAAKE,OAASC,SAASC,cAAc,UACrCJ,KAAKE,OAAOG,MAAQT,EACpBI,KAAKE,OAAOI,OAASV,EAOrBI,KAAKO,IAAMP,KAAKE,OAAOM,WAAW,MAGlCR,KAAKS,mBAAmBC,6GAO5BC,mBAEIZ,YAAMY,mBACNX,KAAKO,IAAM,KACXP,KAAKE,OAAS,SAvCaU,eAmDnC,SAASF,EAAmBG,EAASC,GAEjC,GAAIA,aAAgBC,cACpB,CACIpB,IAAMqB,EAAQF,EAAKG,OAKbC,EAA6B,IAAhBF,EAAMX,MAAcQ,EAAQX,OAAOG,MAAQc,KAAKC,IAAIP,EAAQX,OAAOG,MAAOW,EAAMX,OAC7FgB,EAA+B,IAAjBL,EAAMV,OAAeO,EAAQX,OAAOI,OAASa,KAAKC,IAAIP,EAAQX,OAAOI,OAAQU,EAAMV,QAMvG,OAFAO,EAAQN,IAAIe,UAAUN,EAAO,EAAG,EAAGE,EAAYG,EAAa,EAAG,EAAGR,EAAQX,OAAOG,MAAOQ,EAAQX,OAAOI,SAEhG,EAGX,OAAO"}